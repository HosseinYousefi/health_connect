// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_import

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

// Auto-generated initialization code.

final ffi.Pointer<T> Function<T extends ffi.NativeType>(String sym) jniLookup =
    ProtectedJniExtensions.initGeneratedLibrary("health_connect");

/// from: androidx.health.connect.client.HealthConnectClient
class HealthConnectClient extends jni.JObject {
  late final jni.JObjType? _$type;
  @override
  jni.JObjType get $type => _$type ??= type;

  HealthConnectClient.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $HealthConnectClientType();

  static final _get_Companion =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_HealthConnectClient__Companion")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final androidx.health.connect.client.HealthConnectClient$Companion Companion
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JObject get Companion =>
      const jni.JObjectType().fromRef(_get_Companion().object);

  /// from: static public final java.lang.String DEFAULT_PROVIDER_PACKAGE_NAME
  static const DEFAULT_PROVIDER_PACKAGE_NAME =
      "com.google.android.apps.healthdata";

  /// from: static public final int DEFAULT_PROVIDER_MIN_VERSION_CODE
  static const DEFAULT_PROVIDER_MIN_VERSION_CODE = 35000;

  /// from: static public final int SDK_UNAVAILABLE
  static const SDK_UNAVAILABLE = 1;

  /// from: static public final int SDK_UNAVAILABLE_PROVIDER_UPDATE_REQUIRED
  static const SDK_UNAVAILABLE_PROVIDER_UPDATE_REQUIRED = 2;

  /// from: static public final int SDK_AVAILABLE
  static const SDK_AVAILABLE = 3;

  /// from: static public final java.lang.String HEALTH_CONNECT_CLIENT_TAG
  static const HEALTH_CONNECT_CLIENT_TAG = "HealthConnectClient";

  static final _getPermissionController = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "HealthConnectClient__getPermissionController")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract androidx.health.connect.client.PermissionController getPermissionController()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getPermissionController() => const jni.JObjectType()
      .fromRef(_getPermissionController(reference).object);

  static final _insertRecords = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("HealthConnectClient__insertRecords")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object insertRecords(java.util.List list, kotlin.coroutines.Continuation continuation)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Future<jni.JObject> insertRecords(jni.JObject list) async {
    final $p = ReceivePort();
    final $c = jni.Jni.newPortContinuation($p);
    _insertRecords(reference, list.reference, $c).object;
    final $o = jni.JObjectPtr.fromAddress(await $p.first);
    final $k = const jni.JObjectType().getClass().reference;
    if (jni.Jni.env.IsInstanceOf($o, $k) == 0) {
      throw "Failed";
    }
    return const jni.JObjectType().fromRef($o);
  }

  static final _updateRecords = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("HealthConnectClient__updateRecords")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object updateRecords(java.util.List list, kotlin.coroutines.Continuation continuation)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Future<jni.JObject> updateRecords(jni.JObject list) async {
    final $p = ReceivePort();
    final $c = jni.Jni.newPortContinuation($p);
    _updateRecords(reference, list.reference, $c).object;
    final $o = jni.JObjectPtr.fromAddress(await $p.first);
    final $k = const jni.JObjectType().getClass().reference;
    if (jni.Jni.env.IsInstanceOf($o, $k) == 0) {
      throw "Failed";
    }
    return const jni.JObjectType().fromRef($o);
  }

  static final _deleteRecords = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("HealthConnectClient__deleteRecords")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object deleteRecords(kotlin.reflect.KClass kClass, java.util.List list, java.util.List list1, kotlin.coroutines.Continuation continuation)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Future<jni.JObject> deleteRecords(
      jni.JObject kClass, jni.JObject list, jni.JObject list1) async {
    final $p = ReceivePort();
    final $c = jni.Jni.newPortContinuation($p);
    _deleteRecords(
            reference, kClass.reference, list.reference, list1.reference, $c)
        .object;
    final $o = jni.JObjectPtr.fromAddress(await $p.first);
    final $k = const jni.JObjectType().getClass().reference;
    if (jni.Jni.env.IsInstanceOf($o, $k) == 0) {
      throw "Failed";
    }
    return const jni.JObjectType().fromRef($o);
  }

  static final _deleteRecords1 = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>(
          "HealthConnectClient__deleteRecords1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object deleteRecords(kotlin.reflect.KClass kClass, androidx.health.connect.client.time.TimeRangeFilter timeRangeFilter, kotlin.coroutines.Continuation continuation)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Future<jni.JObject> deleteRecords1(
      jni.JObject kClass, TimeRangeFilter timeRangeFilter) async {
    final $p = ReceivePort();
    final $c = jni.Jni.newPortContinuation($p);
    _deleteRecords1(reference, kClass.reference, timeRangeFilter.reference, $c)
        .object;
    final $o = jni.JObjectPtr.fromAddress(await $p.first);
    final $k = const jni.JObjectType().getClass().reference;
    if (jni.Jni.env.IsInstanceOf($o, $k) == 0) {
      throw "Failed";
    }
    return const jni.JObjectType().fromRef($o);
  }

  static final _readRecord = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("HealthConnectClient__readRecord")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object readRecord(kotlin.reflect.KClass kClass, java.lang.String string, kotlin.coroutines.Continuation continuation)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Future<jni.JObject> readRecord<T extends jni.JObject>(
      jni.JObjType<T> $T, jni.JObject kClass, jni.JString string) async {
    final $p = ReceivePort();
    final $c = jni.Jni.newPortContinuation($p);
    _readRecord(reference, kClass.reference, string.reference, $c).object;
    final $o = jni.JObjectPtr.fromAddress(await $p.first);
    final $k = const jni.JObjectType().getClass().reference;
    if (jni.Jni.env.IsInstanceOf($o, $k) == 0) {
      throw "Failed";
    }
    return const jni.JObjectType().fromRef($o);
  }

  static final _readRecords = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("HealthConnectClient__readRecords")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object readRecords(androidx.health.connect.client.request.ReadRecordsRequest readRecordsRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Future<jni.JObject> readRecords<T extends jni.JObject>(
      jni.JObjType<T> $T, jni.JObject readRecordsRequest) async {
    final $p = ReceivePort();
    final $c = jni.Jni.newPortContinuation($p);
    _readRecords(reference, readRecordsRequest.reference, $c).object;
    final $o = jni.JObjectPtr.fromAddress(await $p.first);
    final $k = const jni.JObjectType().getClass().reference;
    if (jni.Jni.env.IsInstanceOf($o, $k) == 0) {
      throw "Failed";
    }
    return const jni.JObjectType().fromRef($o);
  }

  static final _aggregate = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("HealthConnectClient__aggregate")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object aggregate(androidx.health.connect.client.request.AggregateRequest aggregateRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Future<AggregationResult> aggregate(AggregateRequest aggregateRequest) async {
    final $p = ReceivePort();
    final $c = jni.Jni.newPortContinuation($p);
    _aggregate(reference, aggregateRequest.reference, $c).object;
    final $o = jni.JObjectPtr.fromAddress(await $p.first);
    final $k = const $AggregationResultType().getClass().reference;
    if (jni.Jni.env.IsInstanceOf($o, $k) == 0) {
      throw "Failed";
    }
    return const $AggregationResultType().fromRef($o);
  }

  static final _aggregateGroupByDuration = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "HealthConnectClient__aggregateGroupByDuration")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object aggregateGroupByDuration(androidx.health.connect.client.request.AggregateGroupByDurationRequest aggregateGroupByDurationRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Future<jni.JObject> aggregateGroupByDuration(
      jni.JObject aggregateGroupByDurationRequest) async {
    final $p = ReceivePort();
    final $c = jni.Jni.newPortContinuation($p);
    _aggregateGroupByDuration(
            reference, aggregateGroupByDurationRequest.reference, $c)
        .object;
    final $o = jni.JObjectPtr.fromAddress(await $p.first);
    final $k = const jni.JObjectType().getClass().reference;
    if (jni.Jni.env.IsInstanceOf($o, $k) == 0) {
      throw "Failed";
    }
    return const jni.JObjectType().fromRef($o);
  }

  static final _aggregateGroupByPeriod = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "HealthConnectClient__aggregateGroupByPeriod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object aggregateGroupByPeriod(androidx.health.connect.client.request.AggregateGroupByPeriodRequest aggregateGroupByPeriodRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Future<jni.JObject> aggregateGroupByPeriod(
      jni.JObject aggregateGroupByPeriodRequest) async {
    final $p = ReceivePort();
    final $c = jni.Jni.newPortContinuation($p);
    _aggregateGroupByPeriod(
            reference, aggregateGroupByPeriodRequest.reference, $c)
        .object;
    final $o = jni.JObjectPtr.fromAddress(await $p.first);
    final $k = const jni.JObjectType().getClass().reference;
    if (jni.Jni.env.IsInstanceOf($o, $k) == 0) {
      throw "Failed";
    }
    return const jni.JObjectType().fromRef($o);
  }

  static final _getChangesToken = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "HealthConnectClient__getChangesToken")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object getChangesToken(androidx.health.connect.client.request.ChangesTokenRequest changesTokenRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Future<jni.JString> getChangesToken(jni.JObject changesTokenRequest) async {
    final $p = ReceivePort();
    final $c = jni.Jni.newPortContinuation($p);
    _getChangesToken(reference, changesTokenRequest.reference, $c).object;
    final $o = jni.JObjectPtr.fromAddress(await $p.first);
    final $k = const jni.JStringType().getClass().reference;
    if (jni.Jni.env.IsInstanceOf($o, $k) == 0) {
      throw "Failed";
    }
    return const jni.JStringType().fromRef($o);
  }

  static final _registerForDataNotifications = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>(
          "HealthConnectClient__registerForDataNotifications")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object registerForDataNotifications(java.lang.String string, java.lang.Iterable iterable, kotlin.coroutines.Continuation continuation)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Future<jni.JObject> registerForDataNotifications(
      jni.JString string, jni.JObject iterable) async {
    final $p = ReceivePort();
    final $c = jni.Jni.newPortContinuation($p);
    _registerForDataNotifications(
            reference, string.reference, iterable.reference, $c)
        .object;
    final $o = jni.JObjectPtr.fromAddress(await $p.first);
    final $k = const jni.JObjectType().getClass().reference;
    if (jni.Jni.env.IsInstanceOf($o, $k) == 0) {
      throw "Failed";
    }
    return const jni.JObjectType().fromRef($o);
  }

  static final _unregisterFromDataNotifications = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "HealthConnectClient__unregisterFromDataNotifications")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object unregisterFromDataNotifications(java.lang.String string, kotlin.coroutines.Continuation continuation)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Future<jni.JObject> unregisterFromDataNotifications(
      jni.JString string) async {
    final $p = ReceivePort();
    final $c = jni.Jni.newPortContinuation($p);
    _unregisterFromDataNotifications(reference, string.reference, $c).object;
    final $o = jni.JObjectPtr.fromAddress(await $p.first);
    final $k = const jni.JObjectType().getClass().reference;
    if (jni.Jni.env.IsInstanceOf($o, $k) == 0) {
      throw "Failed";
    }
    return const jni.JObjectType().fromRef($o);
  }

  static final _getChanges = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("HealthConnectClient__getChanges")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object getChanges(java.lang.String string, kotlin.coroutines.Continuation continuation)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Future<jni.JObject> getChanges(jni.JString string) async {
    final $p = ReceivePort();
    final $c = jni.Jni.newPortContinuation($p);
    _getChanges(reference, string.reference, $c).object;
    final $o = jni.JObjectPtr.fromAddress(await $p.first);
    final $k = const jni.JObjectType().getClass().reference;
    if (jni.Jni.env.IsInstanceOf($o, $k) == 0) {
      throw "Failed";
    }
    return const jni.JObjectType().fromRef($o);
  }

  static final _getHealthConnectSettingsAction =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "HealthConnectClient__getHealthConnectSettingsAction")
          .asFunction<jni.JniResult Function()>();

  /// from: static public java.lang.String getHealthConnectSettingsAction()
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JString getHealthConnectSettingsAction() =>
      const jni.JStringType().fromRef(_getHealthConnectSettingsAction().object);

  static final _sdkStatus = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("HealthConnectClient__sdkStatus")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public int sdkStatus(android.content.Context context, java.lang.String string)
  static int sdkStatus(Context context, jni.JString string) =>
      _sdkStatus(context.reference, string.reference).integer;

  static final _isApiSupported =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "HealthConnectClient__isApiSupported")
          .asFunction<jni.JniResult Function()>();

  /// from: static public boolean isApiSupported()
  static bool isApiSupported() => _isApiSupported().boolean;

  static final _isProviderAvailable = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "HealthConnectClient__isProviderAvailable")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public boolean isProviderAvailable(android.content.Context context, java.lang.String string)
  static bool isProviderAvailable(Context context, jni.JString string) =>
      _isProviderAvailable(context.reference, string.reference).boolean;

  static final _getOrCreate = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("HealthConnectClient__getOrCreate")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public androidx.health.connect.client.HealthConnectClient getOrCreate(android.content.Context context, java.lang.String string)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static HealthConnectClient getOrCreate(Context context, jni.JString string) =>
      const $HealthConnectClientType()
          .fromRef(_getOrCreate(context.reference, string.reference).object);

  static final _sdkStatus1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("HealthConnectClient__sdkStatus1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public int sdkStatus(android.content.Context context)
  static int sdkStatus1(Context context) =>
      _sdkStatus1(context.reference).integer;

  static final _isProviderAvailable1 = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "HealthConnectClient__isProviderAvailable1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public boolean isProviderAvailable(android.content.Context context)
  static bool isProviderAvailable1(Context context) =>
      _isProviderAvailable1(context.reference).boolean;

  static final _getOrCreate1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("HealthConnectClient__getOrCreate1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public androidx.health.connect.client.HealthConnectClient getOrCreate(android.content.Context context)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static HealthConnectClient getOrCreate1(Context context) =>
      const $HealthConnectClientType()
          .fromRef(_getOrCreate1(context.reference).object);
}

class $HealthConnectClientType extends jni.JObjType<HealthConnectClient> {
  const $HealthConnectClientType();

  @override
  String get signature =>
      r"Landroidx/health/connect/client/HealthConnectClient;";

  @override
  HealthConnectClient fromRef(jni.JObjectPtr ref) =>
      HealthConnectClient.fromRef(ref);
}

extension $HealthConnectClientArray on jni.JArray<HealthConnectClient> {
  HealthConnectClient operator [](int index) {
    return (elementType as $HealthConnectClientType)
        .fromRef(elementAt(index, jni.JniCallType.objectType).object);
  }

  void operator []=(int index, HealthConnectClient value) {
    (this as jni.JArray<jni.JObject>)[index] = value;
  }
}

/// from: android.content.Context
class Context extends jni.JObject {
  late final jni.JObjType? _$type;
  @override
  jni.JObjType get $type => _$type ??= type;

  Context.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $ContextType();

  /// from: static public final java.lang.String ACCESSIBILITY_SERVICE
  static const ACCESSIBILITY_SERVICE = "accessibility";

  /// from: static public final java.lang.String ACCOUNT_SERVICE
  static const ACCOUNT_SERVICE = "account";

  /// from: static public final java.lang.String ACTIVITY_SERVICE
  static const ACTIVITY_SERVICE = "activity";

  /// from: static public final java.lang.String ALARM_SERVICE
  static const ALARM_SERVICE = "alarm";

  /// from: static public final java.lang.String APPWIDGET_SERVICE
  static const APPWIDGET_SERVICE = "appwidget";

  /// from: static public final java.lang.String APP_OPS_SERVICE
  static const APP_OPS_SERVICE = "appops";

  /// from: static public final java.lang.String APP_SEARCH_SERVICE
  static const APP_SEARCH_SERVICE = "app_search";

  /// from: static public final java.lang.String AUDIO_SERVICE
  static const AUDIO_SERVICE = "audio";

  /// from: static public final java.lang.String BATTERY_SERVICE
  static const BATTERY_SERVICE = "batterymanager";

  /// from: static public final int BIND_ABOVE_CLIENT
  static const BIND_ABOVE_CLIENT = 8;

  /// from: static public final int BIND_ADJUST_WITH_ACTIVITY
  static const BIND_ADJUST_WITH_ACTIVITY = 128;

  /// from: static public final int BIND_ALLOW_OOM_MANAGEMENT
  static const BIND_ALLOW_OOM_MANAGEMENT = 16;

  /// from: static public final int BIND_AUTO_CREATE
  static const BIND_AUTO_CREATE = 1;

  /// from: static public final int BIND_DEBUG_UNBIND
  static const BIND_DEBUG_UNBIND = 2;

  /// from: static public final int BIND_EXTERNAL_SERVICE
  static const BIND_EXTERNAL_SERVICE = -2147483648;

  /// from: static public final int BIND_IMPORTANT
  static const BIND_IMPORTANT = 64;

  /// from: static public final int BIND_INCLUDE_CAPABILITIES
  static const BIND_INCLUDE_CAPABILITIES = 4096;

  /// from: static public final int BIND_NOT_FOREGROUND
  static const BIND_NOT_FOREGROUND = 4;

  /// from: static public final int BIND_NOT_PERCEPTIBLE
  static const BIND_NOT_PERCEPTIBLE = 256;

  /// from: static public final int BIND_WAIVE_PRIORITY
  static const BIND_WAIVE_PRIORITY = 32;

  /// from: static public final java.lang.String BIOMETRIC_SERVICE
  static const BIOMETRIC_SERVICE = "biometric";

  /// from: static public final java.lang.String BLOB_STORE_SERVICE
  static const BLOB_STORE_SERVICE = "blob_store";

  /// from: static public final java.lang.String BLUETOOTH_SERVICE
  static const BLUETOOTH_SERVICE = "bluetooth";

  /// from: static public final java.lang.String BUGREPORT_SERVICE
  static const BUGREPORT_SERVICE = "bugreport";

  /// from: static public final java.lang.String CAMERA_SERVICE
  static const CAMERA_SERVICE = "camera";

  /// from: static public final java.lang.String CAPTIONING_SERVICE
  static const CAPTIONING_SERVICE = "captioning";

  /// from: static public final java.lang.String CARRIER_CONFIG_SERVICE
  static const CARRIER_CONFIG_SERVICE = "carrier_config";

  /// from: static public final java.lang.String CLIPBOARD_SERVICE
  static const CLIPBOARD_SERVICE = "clipboard";

  /// from: static public final java.lang.String COMPANION_DEVICE_SERVICE
  static const COMPANION_DEVICE_SERVICE = "companiondevice";

  /// from: static public final java.lang.String CONNECTIVITY_DIAGNOSTICS_SERVICE
  static const CONNECTIVITY_DIAGNOSTICS_SERVICE = "connectivity_diagnostics";

  /// from: static public final java.lang.String CONNECTIVITY_SERVICE
  static const CONNECTIVITY_SERVICE = "connectivity";

  /// from: static public final java.lang.String CONSUMER_IR_SERVICE
  static const CONSUMER_IR_SERVICE = "consumer_ir";

  /// from: static public final int CONTEXT_IGNORE_SECURITY
  static const CONTEXT_IGNORE_SECURITY = 2;

  /// from: static public final int CONTEXT_INCLUDE_CODE
  static const CONTEXT_INCLUDE_CODE = 1;

  /// from: static public final int CONTEXT_RESTRICTED
  static const CONTEXT_RESTRICTED = 4;

  /// from: static public final java.lang.String CROSS_PROFILE_APPS_SERVICE
  static const CROSS_PROFILE_APPS_SERVICE = "crossprofileapps";

  /// from: static public final java.lang.String DEVICE_POLICY_SERVICE
  static const DEVICE_POLICY_SERVICE = "device_policy";

  /// from: static public final java.lang.String DISPLAY_HASH_SERVICE
  static const DISPLAY_HASH_SERVICE = "display_hash";

  /// from: static public final java.lang.String DISPLAY_SERVICE
  static const DISPLAY_SERVICE = "display";

  /// from: static public final java.lang.String DOMAIN_VERIFICATION_SERVICE
  static const DOMAIN_VERIFICATION_SERVICE = "domain_verification";

  /// from: static public final java.lang.String DOWNLOAD_SERVICE
  static const DOWNLOAD_SERVICE = "download";

  /// from: static public final java.lang.String DROPBOX_SERVICE
  static const DROPBOX_SERVICE = "dropbox";

  /// from: static public final java.lang.String EUICC_SERVICE
  static const EUICC_SERVICE = "euicc";

  /// from: static public final java.lang.String FILE_INTEGRITY_SERVICE
  static const FILE_INTEGRITY_SERVICE = "file_integrity";

  /// from: static public final java.lang.String FINGERPRINT_SERVICE
  static const FINGERPRINT_SERVICE = "fingerprint";

  /// from: static public final java.lang.String GAME_SERVICE
  static const GAME_SERVICE = "game";

  /// from: static public final java.lang.String HARDWARE_PROPERTIES_SERVICE
  static const HARDWARE_PROPERTIES_SERVICE = "hardware_properties";

  /// from: static public final java.lang.String INPUT_METHOD_SERVICE
  static const INPUT_METHOD_SERVICE = "input_method";

  /// from: static public final java.lang.String INPUT_SERVICE
  static const INPUT_SERVICE = "input";

  /// from: static public final java.lang.String IPSEC_SERVICE
  static const IPSEC_SERVICE = "ipsec";

  /// from: static public final java.lang.String JOB_SCHEDULER_SERVICE
  static const JOB_SCHEDULER_SERVICE = "jobscheduler";

  /// from: static public final java.lang.String KEYGUARD_SERVICE
  static const KEYGUARD_SERVICE = "keyguard";

  /// from: static public final java.lang.String LAUNCHER_APPS_SERVICE
  static const LAUNCHER_APPS_SERVICE = "launcherapps";

  /// from: static public final java.lang.String LAYOUT_INFLATER_SERVICE
  static const LAYOUT_INFLATER_SERVICE = "layout_inflater";

  /// from: static public final java.lang.String LOCALE_SERVICE
  static const LOCALE_SERVICE = "locale";

  /// from: static public final java.lang.String LOCATION_SERVICE
  static const LOCATION_SERVICE = "location";

  /// from: static public final java.lang.String MEDIA_COMMUNICATION_SERVICE
  static const MEDIA_COMMUNICATION_SERVICE = "media_communication";

  /// from: static public final java.lang.String MEDIA_METRICS_SERVICE
  static const MEDIA_METRICS_SERVICE = "media_metrics";

  /// from: static public final java.lang.String MEDIA_PROJECTION_SERVICE
  static const MEDIA_PROJECTION_SERVICE = "media_projection";

  /// from: static public final java.lang.String MEDIA_ROUTER_SERVICE
  static const MEDIA_ROUTER_SERVICE = "media_router";

  /// from: static public final java.lang.String MEDIA_SESSION_SERVICE
  static const MEDIA_SESSION_SERVICE = "media_session";

  /// from: static public final java.lang.String MIDI_SERVICE
  static const MIDI_SERVICE = "midi";

  /// from: static public final int MODE_APPEND
  static const MODE_APPEND = 32768;

  /// from: static public final int MODE_ENABLE_WRITE_AHEAD_LOGGING
  static const MODE_ENABLE_WRITE_AHEAD_LOGGING = 8;

  /// from: static public final int MODE_MULTI_PROCESS
  static const MODE_MULTI_PROCESS = 4;

  /// from: static public final int MODE_NO_LOCALIZED_COLLATORS
  static const MODE_NO_LOCALIZED_COLLATORS = 16;

  /// from: static public final int MODE_PRIVATE
  static const MODE_PRIVATE = 0;

  /// from: static public final int MODE_WORLD_READABLE
  static const MODE_WORLD_READABLE = 1;

  /// from: static public final int MODE_WORLD_WRITEABLE
  static const MODE_WORLD_WRITEABLE = 2;

  /// from: static public final java.lang.String NETWORK_STATS_SERVICE
  static const NETWORK_STATS_SERVICE = "netstats";

  /// from: static public final java.lang.String NFC_SERVICE
  static const NFC_SERVICE = "nfc";

  /// from: static public final java.lang.String NOTIFICATION_SERVICE
  static const NOTIFICATION_SERVICE = "notification";

  /// from: static public final java.lang.String NSD_SERVICE
  static const NSD_SERVICE = "servicediscovery";

  /// from: static public final java.lang.String PEOPLE_SERVICE
  static const PEOPLE_SERVICE = "people";

  /// from: static public final java.lang.String PERFORMANCE_HINT_SERVICE
  static const PERFORMANCE_HINT_SERVICE = "performance_hint";

  /// from: static public final java.lang.String POWER_SERVICE
  static const POWER_SERVICE = "power";

  /// from: static public final java.lang.String PRINT_SERVICE
  static const PRINT_SERVICE = "print";

  /// from: static public final int RECEIVER_EXPORTED
  static const RECEIVER_EXPORTED = 2;

  /// from: static public final int RECEIVER_NOT_EXPORTED
  static const RECEIVER_NOT_EXPORTED = 4;

  /// from: static public final int RECEIVER_VISIBLE_TO_INSTANT_APPS
  static const RECEIVER_VISIBLE_TO_INSTANT_APPS = 1;

  /// from: static public final java.lang.String RESTRICTIONS_SERVICE
  static const RESTRICTIONS_SERVICE = "restrictions";

  /// from: static public final java.lang.String ROLE_SERVICE
  static const ROLE_SERVICE = "role";

  /// from: static public final java.lang.String SEARCH_SERVICE
  static const SEARCH_SERVICE = "search";

  /// from: static public final java.lang.String SENSOR_SERVICE
  static const SENSOR_SERVICE = "sensor";

  /// from: static public final java.lang.String SHORTCUT_SERVICE
  static const SHORTCUT_SERVICE = "shortcut";

  /// from: static public final java.lang.String STATUS_BAR_SERVICE
  static const STATUS_BAR_SERVICE = "statusbar";

  /// from: static public final java.lang.String STORAGE_SERVICE
  static const STORAGE_SERVICE = "storage";

  /// from: static public final java.lang.String STORAGE_STATS_SERVICE
  static const STORAGE_STATS_SERVICE = "storagestats";

  /// from: static public final java.lang.String SYSTEM_HEALTH_SERVICE
  static const SYSTEM_HEALTH_SERVICE = "systemhealth";

  /// from: static public final java.lang.String TELECOM_SERVICE
  static const TELECOM_SERVICE = "telecom";

  /// from: static public final java.lang.String TELEPHONY_IMS_SERVICE
  static const TELEPHONY_IMS_SERVICE = "telephony_ims";

  /// from: static public final java.lang.String TELEPHONY_SERVICE
  static const TELEPHONY_SERVICE = "phone";

  /// from: static public final java.lang.String TELEPHONY_SUBSCRIPTION_SERVICE
  static const TELEPHONY_SUBSCRIPTION_SERVICE =
      "telephony_subscription_service";

  /// from: static public final java.lang.String TEXT_CLASSIFICATION_SERVICE
  static const TEXT_CLASSIFICATION_SERVICE = "textclassification";

  /// from: static public final java.lang.String TEXT_SERVICES_MANAGER_SERVICE
  static const TEXT_SERVICES_MANAGER_SERVICE = "textservices";

  /// from: static public final java.lang.String TV_INPUT_SERVICE
  static const TV_INPUT_SERVICE = "tv_input";

  /// from: static public final java.lang.String TV_INTERACTIVE_APP_SERVICE
  static const TV_INTERACTIVE_APP_SERVICE = "tv_interactive_app";

  /// from: static public final java.lang.String UI_MODE_SERVICE
  static const UI_MODE_SERVICE = "uimode";

  /// from: static public final java.lang.String USAGE_STATS_SERVICE
  static const USAGE_STATS_SERVICE = "usagestats";

  /// from: static public final java.lang.String USB_SERVICE
  static const USB_SERVICE = "usb";

  /// from: static public final java.lang.String USER_SERVICE
  static const USER_SERVICE = "user";

  /// from: static public final java.lang.String VIBRATOR_MANAGER_SERVICE
  static const VIBRATOR_MANAGER_SERVICE = "vibrator_manager";

  /// from: static public final java.lang.String VIBRATOR_SERVICE
  static const VIBRATOR_SERVICE = "vibrator";

  /// from: static public final java.lang.String VPN_MANAGEMENT_SERVICE
  static const VPN_MANAGEMENT_SERVICE = "vpn_management";

  /// from: static public final java.lang.String WALLPAPER_SERVICE
  static const WALLPAPER_SERVICE = "wallpaper";

  /// from: static public final java.lang.String WIFI_AWARE_SERVICE
  static const WIFI_AWARE_SERVICE = "wifiaware";

  /// from: static public final java.lang.String WIFI_P2P_SERVICE
  static const WIFI_P2P_SERVICE = "wifip2p";

  /// from: static public final java.lang.String WIFI_RTT_RANGING_SERVICE
  static const WIFI_RTT_RANGING_SERVICE = "wifirtt";

  /// from: static public final java.lang.String WIFI_SERVICE
  static const WIFI_SERVICE = "wifi";

  /// from: static public final java.lang.String WINDOW_SERVICE
  static const WINDOW_SERVICE = "window";

  static final _ctor =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>("Context__ctor")
          .asFunction<jni.JniResult Function()>();

  /// from: public void <init>()
  Context() : super.fromRef(_ctor().object);

  static final _getAssets = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Context__getAssets")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.content.res.AssetManager getAssets()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getAssets() =>
      const jni.JObjectType().fromRef(_getAssets(reference).object);

  static final _getResources = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Context__getResources")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.content.res.Resources getResources()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getResources() =>
      const jni.JObjectType().fromRef(_getResources(reference).object);

  static final _getPackageManager = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Context__getPackageManager")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.content.pm.PackageManager getPackageManager()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getPackageManager() =>
      const jni.JObjectType().fromRef(_getPackageManager(reference).object);

  static final _getContentResolver = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Context__getContentResolver")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.content.ContentResolver getContentResolver()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getContentResolver() =>
      const jni.JObjectType().fromRef(_getContentResolver(reference).object);

  static final _getMainLooper = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Context__getMainLooper")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.os.Looper getMainLooper()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getMainLooper() =>
      const jni.JObjectType().fromRef(_getMainLooper(reference).object);

  static final _getMainExecutor = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Context__getMainExecutor")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.concurrent.Executor getMainExecutor()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getMainExecutor() =>
      const jni.JObjectType().fromRef(_getMainExecutor(reference).object);

  static final _getApplicationContext = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Context__getApplicationContext")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.content.Context getApplicationContext()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Context getApplicationContext() =>
      const $ContextType().fromRef(_getApplicationContext(reference).object);

  static final _registerComponentCallbacks = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Context__registerComponentCallbacks")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void registerComponentCallbacks(android.content.ComponentCallbacks componentCallbacks)
  void registerComponentCallbacks(jni.JObject componentCallbacks) =>
      _registerComponentCallbacks(reference, componentCallbacks.reference)
          .check();

  static final _unregisterComponentCallbacks = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Context__unregisterComponentCallbacks")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void unregisterComponentCallbacks(android.content.ComponentCallbacks componentCallbacks)
  void unregisterComponentCallbacks(jni.JObject componentCallbacks) =>
      _unregisterComponentCallbacks(reference, componentCallbacks.reference)
          .check();

  static final _getText = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("Context__getText")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public final java.lang.CharSequence getText(int i)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getText(int i) =>
      const jni.JObjectType().fromRef(_getText(reference, i).object);

  static final _getString = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("Context__getString")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public final java.lang.String getString(int i)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString getString(int i) =>
      const jni.JStringType().fromRef(_getString(reference, i).object);

  static final _getString1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("Context__getString1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public final java.lang.String getString(int i, java.lang.Object[] objects)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString getString1(int i, jni.JArray<jni.JObject> objects) =>
      const jni.JStringType()
          .fromRef(_getString1(reference, i, objects.reference).object);

  static final _getColor = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("Context__getColor")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public final int getColor(int i)
  int getColor(int i) => _getColor(reference, i).integer;

  static final _getDrawable = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("Context__getDrawable")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public final android.graphics.drawable.Drawable getDrawable(int i)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getDrawable(int i) =>
      const jni.JObjectType().fromRef(_getDrawable(reference, i).object);

  static final _getColorStateList = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Context__getColorStateList")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public final android.content.res.ColorStateList getColorStateList(int i)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getColorStateList(int i) =>
      const jni.JObjectType().fromRef(_getColorStateList(reference, i).object);

  static final _setTheme = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("Context__setTheme")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract void setTheme(int i)
  void setTheme(int i) => _setTheme(reference, i).check();

  static final _getTheme = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Context__getTheme")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.content.res.Resources$Theme getTheme()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getTheme() =>
      const jni.JObjectType().fromRef(_getTheme(reference).object);

  static final _obtainStyledAttributes = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__obtainStyledAttributes")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final android.content.res.TypedArray obtainStyledAttributes(int[] is)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject obtainStyledAttributes(jni.JArray<jni.JInt> is0) =>
      const jni.JObjectType()
          .fromRef(_obtainStyledAttributes(reference, is0.reference).object);

  static final _obtainStyledAttributes1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("Context__obtainStyledAttributes1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public final android.content.res.TypedArray obtainStyledAttributes(int i, int[] is)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject obtainStyledAttributes1(int i, jni.JArray<jni.JInt> is0) =>
      const jni.JObjectType().fromRef(
          _obtainStyledAttributes1(reference, i, is0.reference).object);

  static final _obtainStyledAttributes2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__obtainStyledAttributes2")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet attributeSet, int[] is)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject obtainStyledAttributes2(
          jni.JObject attributeSet, jni.JArray<jni.JInt> is0) =>
      const jni.JObjectType().fromRef(_obtainStyledAttributes2(
              reference, attributeSet.reference, is0.reference)
          .object);

  static final _obtainStyledAttributes3 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Int32)>>("Context__obtainStyledAttributes3")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public final android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet attributeSet, int[] is, int i, int i1)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject obtainStyledAttributes3(
          jni.JObject attributeSet, jni.JArray<jni.JInt> is0, int i, int i1) =>
      const jni.JObjectType().fromRef(_obtainStyledAttributes3(
              reference, attributeSet.reference, is0.reference, i, i1)
          .object);

  static final _getClassLoader = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Context__getClassLoader")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.ClassLoader getClassLoader()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getClassLoader() =>
      const jni.JObjectType().fromRef(_getClassLoader(reference).object);

  static final _getPackageName = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Context__getPackageName")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.String getPackageName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString getPackageName() =>
      const jni.JStringType().fromRef(_getPackageName(reference).object);

  static final _getOpPackageName = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Context__getOpPackageName")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getOpPackageName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString getOpPackageName() =>
      const jni.JStringType().fromRef(_getOpPackageName(reference).object);

  static final _getAttributionTag = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Context__getAttributionTag")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getAttributionTag()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString getAttributionTag() =>
      const jni.JStringType().fromRef(_getAttributionTag(reference).object);

  static final _getAttributionSource = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Context__getAttributionSource")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.AttributionSource getAttributionSource()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getAttributionSource() =>
      const jni.JObjectType().fromRef(_getAttributionSource(reference).object);

  static final _getParams = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Context__getParams")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.ContextParams getParams()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getParams() =>
      const jni.JObjectType().fromRef(_getParams(reference).object);

  static final _getApplicationInfo = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Context__getApplicationInfo")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.content.pm.ApplicationInfo getApplicationInfo()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getApplicationInfo() =>
      const jni.JObjectType().fromRef(_getApplicationInfo(reference).object);

  static final _getPackageResourcePath = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Context__getPackageResourcePath")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.String getPackageResourcePath()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString getPackageResourcePath() => const jni.JStringType()
      .fromRef(_getPackageResourcePath(reference).object);

  static final _getPackageCodePath = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Context__getPackageCodePath")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.String getPackageCodePath()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString getPackageCodePath() =>
      const jni.JStringType().fromRef(_getPackageCodePath(reference).object);

  static final _getSharedPreferences = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Context__getSharedPreferences")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract android.content.SharedPreferences getSharedPreferences(java.lang.String string, int i)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getSharedPreferences(jni.JString string, int i) =>
      const jni.JObjectType().fromRef(
          _getSharedPreferences(reference, string.reference, i).object);

  static final _moveSharedPreferencesFrom = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__moveSharedPreferencesFrom")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean moveSharedPreferencesFrom(android.content.Context context, java.lang.String string)
  bool moveSharedPreferencesFrom(Context context, jni.JString string) =>
      _moveSharedPreferencesFrom(reference, context.reference, string.reference)
          .boolean;

  static final _deleteSharedPreferences = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__deleteSharedPreferences")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean deleteSharedPreferences(java.lang.String string)
  bool deleteSharedPreferences(jni.JString string) =>
      _deleteSharedPreferences(reference, string.reference).boolean;

  static final _openFileInput = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__openFileInput")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.io.FileInputStream openFileInput(java.lang.String string)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject openFileInput(jni.JString string) => const jni.JObjectType()
      .fromRef(_openFileInput(reference, string.reference).object);

  static final _openFileOutput = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("Context__openFileOutput")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract java.io.FileOutputStream openFileOutput(java.lang.String string, int i)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject openFileOutput(jni.JString string, int i) =>
      const jni.JObjectType()
          .fromRef(_openFileOutput(reference, string.reference, i).object);

  static final _deleteFile = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__deleteFile")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean deleteFile(java.lang.String string)
  bool deleteFile(jni.JString string) =>
      _deleteFile(reference, string.reference).boolean;

  static final _getFileStreamPath = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__getFileStreamPath")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.io.File getFileStreamPath(java.lang.String string)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getFileStreamPath(jni.JString string) => const jni.JObjectType()
      .fromRef(_getFileStreamPath(reference, string.reference).object);

  static final _getDataDir = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Context__getDataDir")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.io.File getDataDir()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getDataDir() =>
      const jni.JObjectType().fromRef(_getDataDir(reference).object);

  static final _getFilesDir = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Context__getFilesDir")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.io.File getFilesDir()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getFilesDir() =>
      const jni.JObjectType().fromRef(_getFilesDir(reference).object);

  static final _getNoBackupFilesDir = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Context__getNoBackupFilesDir")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.io.File getNoBackupFilesDir()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getNoBackupFilesDir() =>
      const jni.JObjectType().fromRef(_getNoBackupFilesDir(reference).object);

  static final _getExternalFilesDir = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__getExternalFilesDir")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.io.File getExternalFilesDir(java.lang.String string)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getExternalFilesDir(jni.JString string) => const jni.JObjectType()
      .fromRef(_getExternalFilesDir(reference, string.reference).object);

  static final _getExternalFilesDirs = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__getExternalFilesDirs")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.io.File[] getExternalFilesDirs(java.lang.String string)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JArray<jni.JObject> getExternalFilesDirs(jni.JString string) =>
      const jni.JArrayType(jni.JObjectType())
          .fromRef(_getExternalFilesDirs(reference, string.reference).object);

  static final _getObbDir = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Context__getObbDir")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.io.File getObbDir()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getObbDir() =>
      const jni.JObjectType().fromRef(_getObbDir(reference).object);

  static final _getObbDirs = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Context__getObbDirs")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.io.File[] getObbDirs()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JArray<jni.JObject> getObbDirs() =>
      const jni.JArrayType(jni.JObjectType())
          .fromRef(_getObbDirs(reference).object);

  static final _getCacheDir = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Context__getCacheDir")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.io.File getCacheDir()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getCacheDir() =>
      const jni.JObjectType().fromRef(_getCacheDir(reference).object);

  static final _getCodeCacheDir = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Context__getCodeCacheDir")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.io.File getCodeCacheDir()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getCodeCacheDir() =>
      const jni.JObjectType().fromRef(_getCodeCacheDir(reference).object);

  static final _getExternalCacheDir = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Context__getExternalCacheDir")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.io.File getExternalCacheDir()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getExternalCacheDir() =>
      const jni.JObjectType().fromRef(_getExternalCacheDir(reference).object);

  static final _getExternalCacheDirs = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Context__getExternalCacheDirs")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.io.File[] getExternalCacheDirs()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JArray<jni.JObject> getExternalCacheDirs() =>
      const jni.JArrayType(jni.JObjectType())
          .fromRef(_getExternalCacheDirs(reference).object);

  static final _getExternalMediaDirs = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Context__getExternalMediaDirs")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.io.File[] getExternalMediaDirs()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JArray<jni.JObject> getExternalMediaDirs() =>
      const jni.JArrayType(jni.JObjectType())
          .fromRef(_getExternalMediaDirs(reference).object);

  static final _fileList = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Context__fileList")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.String[] fileList()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JArray<jni.JString> fileList() => const jni.JArrayType(jni.JStringType())
      .fromRef(_fileList(reference).object);

  static final _getDir = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("Context__getDir")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract java.io.File getDir(java.lang.String string, int i)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getDir(jni.JString string, int i) => const jni.JObjectType()
      .fromRef(_getDir(reference, string.reference, i).object);

  static final _openOrCreateDatabase = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("Context__openOrCreateDatabase")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              int, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String string, int i, android.database.sqlite.SQLiteDatabase$CursorFactory cursorFactory)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject openOrCreateDatabase(
          jni.JString string, int i, jni.JObject cursorFactory) =>
      const jni.JObjectType().fromRef(_openOrCreateDatabase(
              reference, string.reference, i, cursorFactory.reference)
          .object);

  static final _openOrCreateDatabase1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__openOrCreateDatabase1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String string, int i, android.database.sqlite.SQLiteDatabase$CursorFactory cursorFactory, android.database.DatabaseErrorHandler databaseErrorHandler)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject openOrCreateDatabase1(jni.JString string, int i,
          jni.JObject cursorFactory, jni.JObject databaseErrorHandler) =>
      const jni.JObjectType().fromRef(_openOrCreateDatabase1(
              reference,
              string.reference,
              i,
              cursorFactory.reference,
              databaseErrorHandler.reference)
          .object);

  static final _moveDatabaseFrom = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__moveDatabaseFrom")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean moveDatabaseFrom(android.content.Context context, java.lang.String string)
  bool moveDatabaseFrom(Context context, jni.JString string) =>
      _moveDatabaseFrom(reference, context.reference, string.reference).boolean;

  static final _deleteDatabase = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__deleteDatabase")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean deleteDatabase(java.lang.String string)
  bool deleteDatabase(jni.JString string) =>
      _deleteDatabase(reference, string.reference).boolean;

  static final _getDatabasePath = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__getDatabasePath")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.io.File getDatabasePath(java.lang.String string)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getDatabasePath(jni.JString string) => const jni.JObjectType()
      .fromRef(_getDatabasePath(reference, string.reference).object);

  static final _databaseList = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Context__databaseList")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.String[] databaseList()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JArray<jni.JString> databaseList() =>
      const jni.JArrayType(jni.JStringType())
          .fromRef(_databaseList(reference).object);

  static final _getWallpaper = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Context__getWallpaper")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.graphics.drawable.Drawable getWallpaper()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getWallpaper() =>
      const jni.JObjectType().fromRef(_getWallpaper(reference).object);

  static final _peekWallpaper = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Context__peekWallpaper")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.graphics.drawable.Drawable peekWallpaper()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject peekWallpaper() =>
      const jni.JObjectType().fromRef(_peekWallpaper(reference).object);

  static final _getWallpaperDesiredMinimumWidth = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Context__getWallpaperDesiredMinimumWidth")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract int getWallpaperDesiredMinimumWidth()
  int getWallpaperDesiredMinimumWidth() =>
      _getWallpaperDesiredMinimumWidth(reference).integer;

  static final _getWallpaperDesiredMinimumHeight = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Context__getWallpaperDesiredMinimumHeight")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract int getWallpaperDesiredMinimumHeight()
  int getWallpaperDesiredMinimumHeight() =>
      _getWallpaperDesiredMinimumHeight(reference).integer;

  static final _setWallpaper = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__setWallpaper")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void setWallpaper(android.graphics.Bitmap bitmap)
  void setWallpaper(jni.JObject bitmap) =>
      _setWallpaper(reference, bitmap.reference).check();

  static final _setWallpaper1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__setWallpaper1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void setWallpaper(java.io.InputStream inputStream)
  void setWallpaper1(jni.JObject inputStream) =>
      _setWallpaper1(reference, inputStream.reference).check();

  static final _clearWallpaper = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Context__clearWallpaper")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void clearWallpaper()
  void clearWallpaper() => _clearWallpaper(reference).check();

  static final _startActivity = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__startActivity")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void startActivity(android.content.Intent intent)
  void startActivity(jni.JObject intent) =>
      _startActivity(reference, intent.reference).check();

  static final _startActivity1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__startActivity1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void startActivity(android.content.Intent intent, android.os.Bundle bundle)
  void startActivity1(jni.JObject intent, jni.JObject bundle) =>
      _startActivity1(reference, intent.reference, bundle.reference).check();

  static final _startActivities = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__startActivities")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void startActivities(android.content.Intent[] intents)
  void startActivities(jni.JArray<jni.JObject> intents) =>
      _startActivities(reference, intents.reference).check();

  static final _startActivities1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__startActivities1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void startActivities(android.content.Intent[] intents, android.os.Bundle bundle)
  void startActivities1(jni.JArray<jni.JObject> intents, jni.JObject bundle) =>
      _startActivities1(reference, intents.reference, bundle.reference).check();

  static final _startIntentSender = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Int32)>>("Context__startIntentSender")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int, int, int)>();

  /// from: public abstract void startIntentSender(android.content.IntentSender intentSender, android.content.Intent intent, int i, int i1, int i2)
  void startIntentSender(jni.JObject intentSender, jni.JObject intent, int i,
          int i1, int i2) =>
      _startIntentSender(
              reference, intentSender.reference, intent.reference, i, i1, i2)
          .check();

  static final _startIntentSender1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("Context__startIntentSender1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int, int, int, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void startIntentSender(android.content.IntentSender intentSender, android.content.Intent intent, int i, int i1, int i2, android.os.Bundle bundle)
  void startIntentSender1(jni.JObject intentSender, jni.JObject intent, int i,
          int i1, int i2, jni.JObject bundle) =>
      _startIntentSender1(reference, intentSender.reference, intent.reference,
              i, i1, i2, bundle.reference)
          .check();

  static final _sendBroadcast = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__sendBroadcast")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void sendBroadcast(android.content.Intent intent)
  void sendBroadcast(jni.JObject intent) =>
      _sendBroadcast(reference, intent.reference).check();

  static final _sendBroadcast1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__sendBroadcast1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void sendBroadcast(android.content.Intent intent, java.lang.String string)
  void sendBroadcast1(jni.JObject intent, jni.JString string) =>
      _sendBroadcast1(reference, intent.reference, string.reference).check();

  static final _sendBroadcastWithMultiplePermissions = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Context__sendBroadcastWithMultiplePermissions")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void sendBroadcastWithMultiplePermissions(android.content.Intent intent, java.lang.String[] strings)
  void sendBroadcastWithMultiplePermissions(
          jni.JObject intent, jni.JArray<jni.JString> strings) =>
      _sendBroadcastWithMultiplePermissions(
              reference, intent.reference, strings.reference)
          .check();

  static final _sendOrderedBroadcast = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__sendOrderedBroadcast")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void sendOrderedBroadcast(android.content.Intent intent, java.lang.String string)
  void sendOrderedBroadcast(jni.JObject intent, jni.JString string) =>
      _sendOrderedBroadcast(reference, intent.reference, string.reference)
          .check();

  static final _sendOrderedBroadcast1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__sendOrderedBroadcast1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void sendOrderedBroadcast(android.content.Intent intent, java.lang.String string, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string1, android.os.Bundle bundle)
  void sendOrderedBroadcast1(
          jni.JObject intent,
          jni.JString string,
          jni.JObject broadcastReceiver,
          jni.JObject handler,
          int i,
          jni.JString string1,
          jni.JObject bundle) =>
      _sendOrderedBroadcast1(
              reference,
              intent.reference,
              string.reference,
              broadcastReceiver.reference,
              handler.reference,
              i,
              string1.reference,
              bundle.reference)
          .check();

  static final _sendBroadcastAsUser = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__sendBroadcastAsUser")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void sendBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle)
  void sendBroadcastAsUser(jni.JObject intent, jni.JObject userHandle) =>
      _sendBroadcastAsUser(reference, intent.reference, userHandle.reference)
          .check();

  static final _sendBroadcastAsUser1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__sendBroadcastAsUser1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void sendBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle, java.lang.String string)
  void sendBroadcastAsUser1(
          jni.JObject intent, jni.JObject userHandle, jni.JString string) =>
      _sendBroadcastAsUser1(reference, intent.reference, userHandle.reference,
              string.reference)
          .check();

  static final _sendOrderedBroadcastAsUser = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Int32,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>(
          "Context__sendOrderedBroadcastAsUser")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void sendOrderedBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle, java.lang.String string, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string1, android.os.Bundle bundle)
  void sendOrderedBroadcastAsUser(
          jni.JObject intent,
          jni.JObject userHandle,
          jni.JString string,
          jni.JObject broadcastReceiver,
          jni.JObject handler,
          int i,
          jni.JString string1,
          jni.JObject bundle) =>
      _sendOrderedBroadcastAsUser(
              reference,
              intent.reference,
              userHandle.reference,
              string.reference,
              broadcastReceiver.reference,
              handler.reference,
              i,
              string1.reference,
              bundle.reference)
          .check();

  static final _sendOrderedBroadcast2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__sendOrderedBroadcast2")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void sendOrderedBroadcast(android.content.Intent intent, java.lang.String string, java.lang.String string1, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string2, android.os.Bundle bundle)
  void sendOrderedBroadcast2(
          jni.JObject intent,
          jni.JString string,
          jni.JString string1,
          jni.JObject broadcastReceiver,
          jni.JObject handler,
          int i,
          jni.JString string2,
          jni.JObject bundle) =>
      _sendOrderedBroadcast2(
              reference,
              intent.reference,
              string.reference,
              string1.reference,
              broadcastReceiver.reference,
              handler.reference,
              i,
              string2.reference,
              bundle.reference)
          .check();

  static final _sendStickyBroadcast = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__sendStickyBroadcast")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void sendStickyBroadcast(android.content.Intent intent)
  void sendStickyBroadcast(jni.JObject intent) =>
      _sendStickyBroadcast(reference, intent.reference).check();

  static final _sendStickyBroadcast1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__sendStickyBroadcast1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void sendStickyBroadcast(android.content.Intent intent, android.os.Bundle bundle)
  void sendStickyBroadcast1(jni.JObject intent, jni.JObject bundle) =>
      _sendStickyBroadcast1(reference, intent.reference, bundle.reference)
          .check();

  static final _sendStickyOrderedBroadcast = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Int32,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>(
          "Context__sendStickyOrderedBroadcast")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void sendStickyOrderedBroadcast(android.content.Intent intent, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string, android.os.Bundle bundle)
  void sendStickyOrderedBroadcast(
          jni.JObject intent,
          jni.JObject broadcastReceiver,
          jni.JObject handler,
          int i,
          jni.JString string,
          jni.JObject bundle) =>
      _sendStickyOrderedBroadcast(
              reference,
              intent.reference,
              broadcastReceiver.reference,
              handler.reference,
              i,
              string.reference,
              bundle.reference)
          .check();

  static final _removeStickyBroadcast = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__removeStickyBroadcast")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void removeStickyBroadcast(android.content.Intent intent)
  void removeStickyBroadcast(jni.JObject intent) =>
      _removeStickyBroadcast(reference, intent.reference).check();

  static final _sendStickyBroadcastAsUser = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__sendStickyBroadcastAsUser")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void sendStickyBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle)
  void sendStickyBroadcastAsUser(jni.JObject intent, jni.JObject userHandle) =>
      _sendStickyBroadcastAsUser(
              reference, intent.reference, userHandle.reference)
          .check();

  static final _sendStickyOrderedBroadcastAsUser = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Int32,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>(
          "Context__sendStickyOrderedBroadcastAsUser")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void sendStickyOrderedBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string, android.os.Bundle bundle)
  void sendStickyOrderedBroadcastAsUser(
          jni.JObject intent,
          jni.JObject userHandle,
          jni.JObject broadcastReceiver,
          jni.JObject handler,
          int i,
          jni.JString string,
          jni.JObject bundle) =>
      _sendStickyOrderedBroadcastAsUser(
              reference,
              intent.reference,
              userHandle.reference,
              broadcastReceiver.reference,
              handler.reference,
              i,
              string.reference,
              bundle.reference)
          .check();

  static final _removeStickyBroadcastAsUser = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Context__removeStickyBroadcastAsUser")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void removeStickyBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle)
  void removeStickyBroadcastAsUser(
          jni.JObject intent, jni.JObject userHandle) =>
      _removeStickyBroadcastAsUser(
              reference, intent.reference, userHandle.reference)
          .check();

  static final _registerReceiver = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__registerReceiver")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.content.Intent registerReceiver(android.content.BroadcastReceiver broadcastReceiver, android.content.IntentFilter intentFilter)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject registerReceiver(
          jni.JObject broadcastReceiver, jni.JObject intentFilter) =>
      const jni.JObjectType().fromRef(_registerReceiver(
              reference, broadcastReceiver.reference, intentFilter.reference)
          .object);

  static final _registerReceiver1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Context__registerReceiver1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract android.content.Intent registerReceiver(android.content.BroadcastReceiver broadcastReceiver, android.content.IntentFilter intentFilter, int i)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject registerReceiver1(
          jni.JObject broadcastReceiver, jni.JObject intentFilter, int i) =>
      const jni.JObjectType().fromRef(_registerReceiver1(
              reference, broadcastReceiver.reference, intentFilter.reference, i)
          .object);

  static final _registerReceiver2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__registerReceiver2")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.content.Intent registerReceiver(android.content.BroadcastReceiver broadcastReceiver, android.content.IntentFilter intentFilter, java.lang.String string, android.os.Handler handler)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject registerReceiver2(jni.JObject broadcastReceiver,
          jni.JObject intentFilter, jni.JString string, jni.JObject handler) =>
      const jni.JObjectType().fromRef(_registerReceiver2(
              reference,
              broadcastReceiver.reference,
              intentFilter.reference,
              string.reference,
              handler.reference)
          .object);

  static final _registerReceiver3 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Context__registerReceiver3")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int)>();

  /// from: public abstract android.content.Intent registerReceiver(android.content.BroadcastReceiver broadcastReceiver, android.content.IntentFilter intentFilter, java.lang.String string, android.os.Handler handler, int i)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject registerReceiver3(
          jni.JObject broadcastReceiver,
          jni.JObject intentFilter,
          jni.JString string,
          jni.JObject handler,
          int i) =>
      const jni.JObjectType().fromRef(_registerReceiver3(
              reference,
              broadcastReceiver.reference,
              intentFilter.reference,
              string.reference,
              handler.reference,
              i)
          .object);

  static final _unregisterReceiver = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__unregisterReceiver")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void unregisterReceiver(android.content.BroadcastReceiver broadcastReceiver)
  void unregisterReceiver(jni.JObject broadcastReceiver) =>
      _unregisterReceiver(reference, broadcastReceiver.reference).check();

  static final _startService = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__startService")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.content.ComponentName startService(android.content.Intent intent)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject startService(jni.JObject intent) => const jni.JObjectType()
      .fromRef(_startService(reference, intent.reference).object);

  static final _startForegroundService = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__startForegroundService")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.content.ComponentName startForegroundService(android.content.Intent intent)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject startForegroundService(jni.JObject intent) =>
      const jni.JObjectType()
          .fromRef(_startForegroundService(reference, intent.reference).object);

  static final _stopService = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__stopService")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean stopService(android.content.Intent intent)
  bool stopService(jni.JObject intent) =>
      _stopService(reference, intent.reference).boolean;

  static final _bindService = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Context__bindService")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract boolean bindService(android.content.Intent intent, android.content.ServiceConnection serviceConnection, int i)
  bool bindService(jni.JObject intent, jni.JObject serviceConnection, int i) =>
      _bindService(reference, intent.reference, serviceConnection.reference, i)
          .boolean;

  static final _bindService1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__bindService1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean bindService(android.content.Intent intent, int i, java.util.concurrent.Executor executor, android.content.ServiceConnection serviceConnection)
  bool bindService1(jni.JObject intent, int i, jni.JObject executor,
          jni.JObject serviceConnection) =>
      _bindService1(reference, intent.reference, i, executor.reference,
              serviceConnection.reference)
          .boolean;

  static final _bindIsolatedService = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__bindIsolatedService")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean bindIsolatedService(android.content.Intent intent, int i, java.lang.String string, java.util.concurrent.Executor executor, android.content.ServiceConnection serviceConnection)
  bool bindIsolatedService(jni.JObject intent, int i, jni.JString string,
          jni.JObject executor, jni.JObject serviceConnection) =>
      _bindIsolatedService(reference, intent.reference, i, string.reference,
              executor.reference, serviceConnection.reference)
          .boolean;

  static final _bindServiceAsUser = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("Context__bindServiceAsUser")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean bindServiceAsUser(android.content.Intent intent, android.content.ServiceConnection serviceConnection, int i, android.os.UserHandle userHandle)
  bool bindServiceAsUser(jni.JObject intent, jni.JObject serviceConnection,
          int i, jni.JObject userHandle) =>
      _bindServiceAsUser(reference, intent.reference,
              serviceConnection.reference, i, userHandle.reference)
          .boolean;

  static final _updateServiceGroup = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Int32)>>("Context__updateServiceGroup")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public void updateServiceGroup(android.content.ServiceConnection serviceConnection, int i, int i1)
  void updateServiceGroup(jni.JObject serviceConnection, int i, int i1) =>
      _updateServiceGroup(reference, serviceConnection.reference, i, i1)
          .check();

  static final _unbindService = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__unbindService")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void unbindService(android.content.ServiceConnection serviceConnection)
  void unbindService(jni.JObject serviceConnection) =>
      _unbindService(reference, serviceConnection.reference).check();

  static final _startInstrumentation = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__startInstrumentation")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean startInstrumentation(android.content.ComponentName componentName, java.lang.String string, android.os.Bundle bundle)
  bool startInstrumentation(
          jni.JObject componentName, jni.JString string, jni.JObject bundle) =>
      _startInstrumentation(reference, componentName.reference,
              string.reference, bundle.reference)
          .boolean;

  static final _getSystemService = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__getSystemService")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object getSystemService(java.lang.String string)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getSystemService(jni.JString string) => const jni.JObjectType()
      .fromRef(_getSystemService(reference, string.reference).object);

  static final _getSystemService1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__getSystemService1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final T getSystemService(java.lang.Class class)
  /// The returned object must be deleted after use, by calling the `delete` method.
  T getSystemService1<T extends jni.JObject>(
          jni.JObjType<T> $T, jni.JObject class0) =>
      $T.fromRef(_getSystemService1(reference, class0.reference).object);

  static final _getSystemServiceName = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__getSystemServiceName")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.String getSystemServiceName(java.lang.Class class)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString getSystemServiceName(jni.JObject class0) =>
      const jni.JStringType()
          .fromRef(_getSystemServiceName(reference, class0.reference).object);

  static final _checkPermission = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Int32)>>("Context__checkPermission")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public abstract int checkPermission(java.lang.String string, int i, int i1)
  int checkPermission(jni.JString string, int i, int i1) =>
      _checkPermission(reference, string.reference, i, i1).integer;

  static final _checkCallingPermission = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__checkCallingPermission")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract int checkCallingPermission(java.lang.String string)
  int checkCallingPermission(jni.JString string) =>
      _checkCallingPermission(reference, string.reference).integer;

  static final _checkCallingOrSelfPermission = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Context__checkCallingOrSelfPermission")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract int checkCallingOrSelfPermission(java.lang.String string)
  int checkCallingOrSelfPermission(jni.JString string) =>
      _checkCallingOrSelfPermission(reference, string.reference).integer;

  static final _checkSelfPermission = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__checkSelfPermission")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract int checkSelfPermission(java.lang.String string)
  int checkSelfPermission(jni.JString string) =>
      _checkSelfPermission(reference, string.reference).integer;

  static final _enforcePermission = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("Context__enforcePermission")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              int, int, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void enforcePermission(java.lang.String string, int i, int i1, java.lang.String string1)
  void enforcePermission(
          jni.JString string, int i, int i1, jni.JString string1) =>
      _enforcePermission(reference, string.reference, i, i1, string1.reference)
          .check();

  static final _enforceCallingPermission = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__enforceCallingPermission")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void enforceCallingPermission(java.lang.String string, java.lang.String string1)
  void enforceCallingPermission(jni.JString string, jni.JString string1) =>
      _enforceCallingPermission(reference, string.reference, string1.reference)
          .check();

  static final _enforceCallingOrSelfPermission = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Context__enforceCallingOrSelfPermission")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void enforceCallingOrSelfPermission(java.lang.String string, java.lang.String string1)
  void enforceCallingOrSelfPermission(
          jni.JString string, jni.JString string1) =>
      _enforceCallingOrSelfPermission(
              reference, string.reference, string1.reference)
          .check();

  static final _grantUriPermission = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Context__grantUriPermission")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract void grantUriPermission(java.lang.String string, android.net.Uri uri, int i)
  void grantUriPermission(jni.JString string, jni.JObject uri, int i) =>
      _grantUriPermission(reference, string.reference, uri.reference, i)
          .check();

  static final _revokeUriPermission = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Context__revokeUriPermission")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract void revokeUriPermission(android.net.Uri uri, int i)
  void revokeUriPermission(jni.JObject uri, int i) =>
      _revokeUriPermission(reference, uri.reference, i).check();

  static final _revokeUriPermission1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Context__revokeUriPermission1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract void revokeUriPermission(java.lang.String string, android.net.Uri uri, int i)
  void revokeUriPermission1(jni.JString string, jni.JObject uri, int i) =>
      _revokeUriPermission1(reference, string.reference, uri.reference, i)
          .check();

  static final _checkUriPermission = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Int32)>>("Context__checkUriPermission")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int, int)>();

  /// from: public abstract int checkUriPermission(android.net.Uri uri, int i, int i1, int i2)
  int checkUriPermission(jni.JObject uri, int i, int i1, int i2) =>
      _checkUriPermission(reference, uri.reference, i, i1, i2).integer;

  static final _checkUriPermissions = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Int32)>>("Context__checkUriPermissions")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int, int)>();

  /// from: public java.lang.Object[] checkUriPermissions(java.util.List list, int i, int i1, int i2)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JArray<jni.JInt> checkUriPermissions(
          jni.JObject list, int i, int i1, int i2) =>
      const jni.JArrayType(jni.JIntType()).fromRef(
          _checkUriPermissions(reference, list.reference, i, i1, i2).object);

  static final _checkCallingUriPermission = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Context__checkCallingUriPermission")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract int checkCallingUriPermission(android.net.Uri uri, int i)
  int checkCallingUriPermission(jni.JObject uri, int i) =>
      _checkCallingUriPermission(reference, uri.reference, i).integer;

  static final _checkCallingUriPermissions = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Context__checkCallingUriPermissions")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public java.lang.Object[] checkCallingUriPermissions(java.util.List list, int i)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JArray<jni.JInt> checkCallingUriPermissions(jni.JObject list, int i) =>
      const jni.JArrayType(jni.JIntType()).fromRef(
          _checkCallingUriPermissions(reference, list.reference, i).object);

  static final _checkCallingOrSelfUriPermission = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Context__checkCallingOrSelfUriPermission")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract int checkCallingOrSelfUriPermission(android.net.Uri uri, int i)
  int checkCallingOrSelfUriPermission(jni.JObject uri, int i) =>
      _checkCallingOrSelfUriPermission(reference, uri.reference, i).integer;

  static final _checkCallingOrSelfUriPermissions = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Context__checkCallingOrSelfUriPermissions")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public java.lang.Object[] checkCallingOrSelfUriPermissions(java.util.List list, int i)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JArray<jni.JInt> checkCallingOrSelfUriPermissions(
          jni.JObject list, int i) =>
      const jni.JArrayType(jni.JIntType()).fromRef(
          _checkCallingOrSelfUriPermissions(reference, list.reference, i)
              .object);

  static final _checkUriPermission1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Int32)>>("Context__checkUriPermission1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int, int)>();

  /// from: public abstract int checkUriPermission(android.net.Uri uri, java.lang.String string, java.lang.String string1, int i, int i1, int i2)
  int checkUriPermission1(jni.JObject uri, jni.JString string,
          jni.JString string1, int i, int i1, int i2) =>
      _checkUriPermission1(reference, uri.reference, string.reference,
              string1.reference, i, i1, i2)
          .integer;

  static final _enforceUriPermission = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("Context__enforceUriPermission")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              int, int, int, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void enforceUriPermission(android.net.Uri uri, int i, int i1, int i2, java.lang.String string)
  void enforceUriPermission(
          jni.JObject uri, int i, int i1, int i2, jni.JString string) =>
      _enforceUriPermission(
              reference, uri.reference, i, i1, i2, string.reference)
          .check();

  static final _enforceCallingUriPermission = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Int32,
                      ffi.Pointer<ffi.Void>)>>(
          "Context__enforceCallingUriPermission")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              int, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void enforceCallingUriPermission(android.net.Uri uri, int i, java.lang.String string)
  void enforceCallingUriPermission(
          jni.JObject uri, int i, jni.JString string) =>
      _enforceCallingUriPermission(
              reference, uri.reference, i, string.reference)
          .check();

  static final _enforceCallingOrSelfUriPermission = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Int32,
                      ffi.Pointer<ffi.Void>)>>(
          "Context__enforceCallingOrSelfUriPermission")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              int, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void enforceCallingOrSelfUriPermission(android.net.Uri uri, int i, java.lang.String string)
  void enforceCallingOrSelfUriPermission(
          jni.JObject uri, int i, jni.JString string) =>
      _enforceCallingOrSelfUriPermission(
              reference, uri.reference, i, string.reference)
          .check();

  static final _enforceUriPermission1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("Context__enforceUriPermission1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              int,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void enforceUriPermission(android.net.Uri uri, java.lang.String string, java.lang.String string1, int i, int i1, int i2, java.lang.String string2)
  void enforceUriPermission1(jni.JObject uri, jni.JString string,
          jni.JString string1, int i, int i1, int i2, jni.JString string2) =>
      _enforceUriPermission1(reference, uri.reference, string.reference,
              string1.reference, i, i1, i2, string2.reference)
          .check();

  static final _revokeSelfPermissionOnKill = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Context__revokeSelfPermissionOnKill")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void revokeSelfPermissionOnKill(java.lang.String string)
  void revokeSelfPermissionOnKill(jni.JString string) =>
      _revokeSelfPermissionOnKill(reference, string.reference).check();

  static final _revokeSelfPermissionsOnKill = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Context__revokeSelfPermissionsOnKill")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void revokeSelfPermissionsOnKill(java.util.Collection collection)
  void revokeSelfPermissionsOnKill(jni.JObject collection) =>
      _revokeSelfPermissionsOnKill(reference, collection.reference).check();

  static final _createPackageContext = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Context__createPackageContext")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract android.content.Context createPackageContext(java.lang.String string, int i)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Context createPackageContext(jni.JString string, int i) =>
      const $ContextType().fromRef(
          _createPackageContext(reference, string.reference, i).object);

  static final _createContextForSplit = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__createContextForSplit")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.content.Context createContextForSplit(java.lang.String string)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Context createContextForSplit(jni.JString string) => const $ContextType()
      .fromRef(_createContextForSplit(reference, string.reference).object);

  static final _createConfigurationContext = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Context__createConfigurationContext")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.content.Context createConfigurationContext(android.content.res.Configuration configuration)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Context createConfigurationContext(jni.JObject configuration) =>
      const $ContextType().fromRef(
          _createConfigurationContext(reference, configuration.reference)
              .object);

  static final _createDisplayContext = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__createDisplayContext")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.content.Context createDisplayContext(android.view.Display display)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Context createDisplayContext(jni.JObject display) => const $ContextType()
      .fromRef(_createDisplayContext(reference, display.reference).object);

  static final _createWindowContext = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("Context__createWindowContext")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Context createWindowContext(int i, android.os.Bundle bundle)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Context createWindowContext(int i, jni.JObject bundle) => const $ContextType()
      .fromRef(_createWindowContext(reference, i, bundle.reference).object);

  static final _createWindowContext1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("Context__createWindowContext1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              int, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Context createWindowContext(android.view.Display display, int i, android.os.Bundle bundle)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Context createWindowContext1(
          jni.JObject display, int i, jni.JObject bundle) =>
      const $ContextType().fromRef(_createWindowContext1(
              reference, display.reference, i, bundle.reference)
          .object);

  static final _createContext = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__createContext")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Context createContext(android.content.ContextParams contextParams)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Context createContext(jni.JObject contextParams) => const $ContextType()
      .fromRef(_createContext(reference, contextParams.reference).object);

  static final _createAttributionContext = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__createAttributionContext")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Context createAttributionContext(java.lang.String string)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Context createAttributionContext(jni.JString string) => const $ContextType()
      .fromRef(_createAttributionContext(reference, string.reference).object);

  static final _createDeviceProtectedStorageContext = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Context__createDeviceProtectedStorageContext")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.content.Context createDeviceProtectedStorageContext()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Context createDeviceProtectedStorageContext() => const $ContextType()
      .fromRef(_createDeviceProtectedStorageContext(reference).object);

  static final _getDisplay = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Context__getDisplay")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.view.Display getDisplay()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getDisplay() =>
      const jni.JObjectType().fromRef(_getDisplay(reference).object);

  static final _isRestricted = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Context__isRestricted")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isRestricted()
  bool isRestricted() => _isRestricted(reference).boolean;

  static final _isDeviceProtectedStorage = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Context__isDeviceProtectedStorage")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean isDeviceProtectedStorage()
  bool isDeviceProtectedStorage() =>
      _isDeviceProtectedStorage(reference).boolean;

  static final _isUiContext = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Context__isUiContext")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isUiContext()
  bool isUiContext() => _isUiContext(reference).boolean;
}

class $ContextType extends jni.JObjType<Context> {
  const $ContextType();

  @override
  String get signature => r"Landroid/content/Context;";

  @override
  Context fromRef(jni.JObjectPtr ref) => Context.fromRef(ref);
}

extension $ContextArray on jni.JArray<Context> {
  Context operator [](int index) {
    return (elementType as $ContextType)
        .fromRef(elementAt(index, jni.JniCallType.objectType).object);
  }

  void operator []=(int index, Context value) {
    (this as jni.JArray<jni.JObject>)[index] = value;
  }
}

/// from: androidx.health.connect.client.request.AggregateRequest
class AggregateRequest extends jni.JObject {
  late final jni.JObjType? _$type;
  @override
  jni.JObjType get $type => _$type ??= type;

  AggregateRequest.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $AggregateRequestType();

  static final _ctor = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("AggregateRequest__ctor")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.util.Set set, androidx.health.connect.client.time.TimeRangeFilter timeRangeFilter, java.util.Set set1)
  AggregateRequest(Set<AggregateMetric<jni.JObject>> set0,
      TimeRangeFilter timeRangeFilter, Set<jni.JObject> set1)
      : super.fromRef(
            _ctor(set0.reference, timeRangeFilter.reference, set1.reference)
                .object);

  static final _ctor1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("AggregateRequest__ctor1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.util.Set set, androidx.health.connect.client.time.TimeRangeFilter timeRangeFilter, java.util.Set set1, int i, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  AggregateRequest.ctor1(Set<jni.JObject> set0, TimeRangeFilter timeRangeFilter,
      Set<jni.JObject> set1, int i, jni.JObject defaultConstructorMarker)
      : super.fromRef(_ctor1(set0.reference, timeRangeFilter.reference,
                set1.reference, i, defaultConstructorMarker.reference)
            .object);

  static final _equals1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("AggregateRequest__equals1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean equals(java.lang.Object object)
  bool equals1(jni.JObject object) =>
      _equals1(reference, object.reference).boolean;

  static final _hashCode1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("AggregateRequest__hashCode1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int hashCode()
  int hashCode1() => _hashCode1(reference).integer;
}

class $AggregateRequestType extends jni.JObjType<AggregateRequest> {
  const $AggregateRequestType();

  @override
  String get signature =>
      r"Landroidx/health/connect/client/request/AggregateRequest;";

  @override
  AggregateRequest fromRef(jni.JObjectPtr ref) => AggregateRequest.fromRef(ref);
}

extension $AggregateRequestArray on jni.JArray<AggregateRequest> {
  AggregateRequest operator [](int index) {
    return (elementType as $AggregateRequestType)
        .fromRef(elementAt(index, jni.JniCallType.objectType).object);
  }

  void operator []=(int index, AggregateRequest value) {
    (this as jni.JArray<jni.JObject>)[index] = value;
  }
}

/// from: androidx.health.connect.client.time.TimeRangeFilter
class TimeRangeFilter extends jni.JObject {
  late final jni.JObjType? _$type;
  @override
  jni.JObjType get $type => _$type ??= type;

  TimeRangeFilter.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $TimeRangeFilterType();

  static final _get_Companion =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_TimeRangeFilter__Companion")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final androidx.health.connect.client.time.TimeRangeFilter$Companion Companion
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JObject get Companion =>
      const jni.JObjectType().fromRef(_get_Companion().object);

  static final _ctor = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("TimeRangeFilter__ctor")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.time.Instant instant, java.time.Instant instant1, java.time.LocalDateTime localDateTime, java.time.LocalDateTime localDateTime1)
  TimeRangeFilter(Instant instant, Instant instant1, jni.JObject localDateTime,
      jni.JObject localDateTime1)
      : super.fromRef(_ctor(instant.reference, instant1.reference,
                localDateTime.reference, localDateTime1.reference)
            .object);

  static final _ctor1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("TimeRangeFilter__ctor1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.time.Instant instant, java.time.Instant instant1, java.time.LocalDateTime localDateTime, java.time.LocalDateTime localDateTime1, int i, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  TimeRangeFilter.ctor1(
      Instant instant,
      Instant instant1,
      jni.JObject localDateTime,
      jni.JObject localDateTime1,
      int i,
      jni.JObject defaultConstructorMarker)
      : super.fromRef(_ctor1(
                instant.reference,
                instant1.reference,
                localDateTime.reference,
                localDateTime1.reference,
                i,
                defaultConstructorMarker.reference)
            .object);

  static final _equals1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("TimeRangeFilter__equals1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean equals(java.lang.Object object)
  bool equals1(jni.JObject object) =>
      _equals1(reference, object.reference).boolean;

  static final _hashCode1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("TimeRangeFilter__hashCode1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int hashCode()
  int hashCode1() => _hashCode1(reference).integer;

  static final _ctor2 = jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
          "TimeRangeFilter__ctor2")
      .asFunction<jni.JniResult Function()>();

  /// from: public void <init>()
  TimeRangeFilter.ctor2() : super.fromRef(_ctor2().object);

  static final _between = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("TimeRangeFilter__between")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public final androidx.health.connect.client.time.TimeRangeFilter between(java.time.Instant instant, java.time.Instant instant1)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static TimeRangeFilter between(Instant instant, Instant instant1) =>
      const $TimeRangeFilterType()
          .fromRef(_between(instant.reference, instant1.reference).object);

  static final _between1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("TimeRangeFilter__between1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public final androidx.health.connect.client.time.TimeRangeFilter between(java.time.LocalDateTime localDateTime, java.time.LocalDateTime localDateTime1)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static TimeRangeFilter between1(
          jni.JObject localDateTime, jni.JObject localDateTime1) =>
      const $TimeRangeFilterType().fromRef(
          _between1(localDateTime.reference, localDateTime1.reference).object);

  static final _before = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("TimeRangeFilter__before")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public final androidx.health.connect.client.time.TimeRangeFilter before(java.time.Instant instant)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static TimeRangeFilter before(Instant instant) =>
      const $TimeRangeFilterType().fromRef(_before(instant.reference).object);

  static final _before1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("TimeRangeFilter__before1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public final androidx.health.connect.client.time.TimeRangeFilter before(java.time.LocalDateTime localDateTime)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static TimeRangeFilter before1(jni.JObject localDateTime) =>
      const $TimeRangeFilterType()
          .fromRef(_before1(localDateTime.reference).object);

  static final _after = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("TimeRangeFilter__after")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public final androidx.health.connect.client.time.TimeRangeFilter after(java.time.Instant instant)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static TimeRangeFilter after(Instant instant) =>
      const $TimeRangeFilterType().fromRef(_after(instant.reference).object);

  static final _after1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("TimeRangeFilter__after1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public final androidx.health.connect.client.time.TimeRangeFilter after(java.time.LocalDateTime localDateTime)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static TimeRangeFilter after1(jni.JObject localDateTime) =>
      const $TimeRangeFilterType()
          .fromRef(_after1(localDateTime.reference).object);
}

class $TimeRangeFilterType extends jni.JObjType<TimeRangeFilter> {
  const $TimeRangeFilterType();

  @override
  String get signature =>
      r"Landroidx/health/connect/client/time/TimeRangeFilter;";

  @override
  TimeRangeFilter fromRef(jni.JObjectPtr ref) => TimeRangeFilter.fromRef(ref);
}

extension $TimeRangeFilterArray on jni.JArray<TimeRangeFilter> {
  TimeRangeFilter operator [](int index) {
    return (elementType as $TimeRangeFilterType)
        .fromRef(elementAt(index, jni.JniCallType.objectType).object);
  }

  void operator []=(int index, TimeRangeFilter value) {
    (this as jni.JArray<jni.JObject>)[index] = value;
  }
}

/// from: androidx.health.connect.client.aggregate.AggregationResult
class AggregationResult extends jni.JObject {
  late final jni.JObjType? _$type;
  @override
  jni.JObjType get $type => _$type ??= type;

  AggregationResult.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $AggregationResultType();

  static final _ctor = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("AggregationResult__ctor")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.util.Map map, java.util.Map map1, java.util.Set set)
  AggregationResult(jni.JObject map, jni.JObject map1, Set<jni.JObject> set0)
      : super.fromRef(
            _ctor(map.reference, map1.reference, set0.reference).object);

  static final _getDataOrigins = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("AggregationResult__getDataOrigins")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final java.util.Set getDataOrigins()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Set<jni.JObject> getDataOrigins() => const $SetType(jni.JObjectType())
      .fromRef(_getDataOrigins(reference).object);

  static final _hasMetric = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("AggregationResult__hasMetric")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final boolean hasMetric(androidx.health.connect.client.aggregate.AggregateMetric aggregateMetric)
  bool hasMetric(AggregateMetric<jni.JObject> aggregateMetric) =>
      _hasMetric(reference, aggregateMetric.reference).boolean;

  static final _contains = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("AggregationResult__contains")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final boolean contains(androidx.health.connect.client.aggregate.AggregateMetric aggregateMetric)
  bool contains(AggregateMetric<jni.JObject> aggregateMetric) =>
      _contains(reference, aggregateMetric.reference).boolean;

  static final _getMetric = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("AggregationResult__getMetric")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final T getMetric(androidx.health.connect.client.aggregate.AggregateMetric aggregateMetric)
  /// The returned object must be deleted after use, by calling the `delete` method.
  T getMetric<T extends jni.JObject>(
          jni.JObjType<T> $T, AggregateMetric<T> aggregateMetric) =>
      $T.fromRef(_getMetric(reference, aggregateMetric.reference).object);

  static final _get0 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("AggregationResult__get0")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final T get(androidx.health.connect.client.aggregate.AggregateMetric aggregateMetric)
  /// The returned object must be deleted after use, by calling the `delete` method.
  T get0<T extends jni.JObject>(
          jni.JObjType<T> $T, AggregateMetric<T> aggregateMetric) =>
      $T.fromRef(_get0(reference, aggregateMetric.reference).object);
}

class $AggregationResultType extends jni.JObjType<AggregationResult> {
  const $AggregationResultType();

  @override
  String get signature =>
      r"Landroidx/health/connect/client/aggregate/AggregationResult;";

  @override
  AggregationResult fromRef(jni.JObjectPtr ref) =>
      AggregationResult.fromRef(ref);
}

extension $AggregationResultArray on jni.JArray<AggregationResult> {
  AggregationResult operator [](int index) {
    return (elementType as $AggregationResultType)
        .fromRef(elementAt(index, jni.JniCallType.objectType).object);
  }

  void operator []=(int index, AggregationResult value) {
    (this as jni.JArray<jni.JObject>)[index] = value;
  }
}

/// from: androidx.health.connect.client.aggregate.AggregateMetric
class AggregateMetric<T extends jni.JObject> extends jni.JObject {
  late final jni.JObjType? _$type;
  @override
  jni.JObjType get $type => _$type ??= type(
        $T,
      );

  final jni.JObjType<T> $T;

  AggregateMetric.fromRef(
    this.$T,
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static $AggregateMetricType<T> type<T extends jni.JObject>(
    jni.JObjType<T> $T,
  ) {
    return $AggregateMetricType(
      $T,
    );
  }

  static final _get_Companion =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_AggregateMetric__Companion")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final androidx.health.connect.client.aggregate.AggregateMetric$Companion Companion
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JObject get Companion =>
      const jni.JObjectType().fromRef(_get_Companion().object);

  static final _ctor = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("AggregateMetric__ctor")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(androidx.health.connect.client.aggregate.AggregateMetric$Converter converter, java.lang.String string, androidx.health.connect.client.aggregate.AggregateMetric$AggregationType aggregationType, java.lang.String string1)
  AggregateMetric(this.$T, jni.JObject converter, jni.JString string,
      jni.JObject aggregationType, jni.JString string1)
      : super.fromRef(_ctor(converter.reference, string.reference,
                aggregationType.reference, string1.reference)
            .object);
}

class $AggregateMetricType<T extends jni.JObject>
    extends jni.JObjType<AggregateMetric<T>> {
  final jni.JObjType<T> $T;

  const $AggregateMetricType(
    this.$T,
  );

  @override
  String get signature =>
      r"Landroidx/health/connect/client/aggregate/AggregateMetric;";

  @override
  AggregateMetric<T> fromRef(jni.JObjectPtr ref) =>
      AggregateMetric.fromRef($T, ref);
}

extension $AggregateMetricArray<T extends jni.JObject>
    on jni.JArray<AggregateMetric<T>> {
  AggregateMetric<T> operator [](int index) {
    return (elementType as $AggregateMetricType<T>)
        .fromRef(elementAt(index, jni.JniCallType.objectType).object);
  }

  void operator []=(int index, AggregateMetric<T> value) {
    (this as jni.JArray<jni.JObject>)[index] = value;
  }
}

/// from: androidx.health.connect.client.records.StepsRecord
class StepsRecord extends jni.JObject {
  late final jni.JObjType? _$type;
  @override
  jni.JObjType get $type => _$type ??= type;

  StepsRecord.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $StepsRecordType();

  static final _get_Companion =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_StepsRecord__Companion")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final androidx.health.connect.client.records.StepsRecord$Companion Companion
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JObject get Companion =>
      const jni.JObjectType().fromRef(_get_Companion().object);

  static final _get_COUNT_TOTAL =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_StepsRecord__COUNT_TOTAL")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final androidx.health.connect.client.aggregate.AggregateMetric COUNT_TOTAL
  /// The returned object must be deleted after use, by calling the `delete` method.
  static AggregateMetric<Long> get COUNT_TOTAL =>
      const $AggregateMetricType($LongType())
          .fromRef(_get_COUNT_TOTAL().object);

  static final _ctor = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int64,
                  ffi.Pointer<ffi.Void>)>>("StepsRecord__ctor")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.time.Instant instant, java.time.ZoneOffset zoneOffset, java.time.Instant instant1, java.time.ZoneOffset zoneOffset1, long j, androidx.health.connect.client.records.metadata.Metadata metadata)
  StepsRecord(Instant instant, jni.JObject zoneOffset, Instant instant1,
      jni.JObject zoneOffset1, int j, jni.JObject metadata)
      : super.fromRef(_ctor(
                instant.reference,
                zoneOffset.reference,
                instant1.reference,
                zoneOffset1.reference,
                j,
                metadata.reference)
            .object);

  static final _ctor1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int64,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("StepsRecord__ctor1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.time.Instant instant, java.time.ZoneOffset zoneOffset, java.time.Instant instant1, java.time.ZoneOffset zoneOffset1, long j, androidx.health.connect.client.records.metadata.Metadata metadata, int i, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  StepsRecord.ctor1(
      Instant instant,
      jni.JObject zoneOffset,
      Instant instant1,
      jni.JObject zoneOffset1,
      int j,
      jni.JObject metadata,
      int i,
      jni.JObject defaultConstructorMarker)
      : super.fromRef(_ctor1(
                instant.reference,
                zoneOffset.reference,
                instant1.reference,
                zoneOffset1.reference,
                j,
                metadata.reference,
                i,
                defaultConstructorMarker.reference)
            .object);

  static final _getStartTime = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("StepsRecord__getStartTime")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.time.Instant getStartTime()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Instant getStartTime() =>
      const $InstantType().fromRef(_getStartTime(reference).object);

  static final _getStartZoneOffset = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("StepsRecord__getStartZoneOffset")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.time.ZoneOffset getStartZoneOffset()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getStartZoneOffset() =>
      const jni.JObjectType().fromRef(_getStartZoneOffset(reference).object);

  static final _getEndTime = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("StepsRecord__getEndTime")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.time.Instant getEndTime()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Instant getEndTime() =>
      const $InstantType().fromRef(_getEndTime(reference).object);

  static final _getEndZoneOffset = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("StepsRecord__getEndZoneOffset")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.time.ZoneOffset getEndZoneOffset()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getEndZoneOffset() =>
      const jni.JObjectType().fromRef(_getEndZoneOffset(reference).object);

  static final _getCount = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("StepsRecord__getCount")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final long getCount()
  int getCount() => _getCount(reference).long;

  static final _getMetadata = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("StepsRecord__getMetadata")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public androidx.health.connect.client.records.metadata.Metadata getMetadata()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getMetadata() =>
      const jni.JObjectType().fromRef(_getMetadata(reference).object);

  static final _equals1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("StepsRecord__equals1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean equals(java.lang.Object object)
  bool equals1(jni.JObject object) =>
      _equals1(reference, object.reference).boolean;

  static final _hashCode1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("StepsRecord__hashCode1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int hashCode()
  int hashCode1() => _hashCode1(reference).integer;
}

class $StepsRecordType extends jni.JObjType<StepsRecord> {
  const $StepsRecordType();

  @override
  String get signature =>
      r"Landroidx/health/connect/client/records/StepsRecord;";

  @override
  StepsRecord fromRef(jni.JObjectPtr ref) => StepsRecord.fromRef(ref);
}

extension $StepsRecordArray on jni.JArray<StepsRecord> {
  StepsRecord operator [](int index) {
    return (elementType as $StepsRecordType)
        .fromRef(elementAt(index, jni.JniCallType.objectType).object);
  }

  void operator []=(int index, StepsRecord value) {
    (this as jni.JArray<jni.JObject>)[index] = value;
  }
}

/// from: java.time.Instant
class Instant extends jni.JObject {
  late final jni.JObjType? _$type;
  @override
  jni.JObjType get $type => _$type ??= type;

  Instant.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $InstantType();

  static final _get_EPOCH =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Instant__EPOCH")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.time.Instant EPOCH
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Instant get EPOCH => const $InstantType().fromRef(_get_EPOCH().object);

  static final _get_MAX =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Instant__MAX")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.time.Instant MAX
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Instant get MAX => const $InstantType().fromRef(_get_MAX().object);

  static final _get_MIN =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Instant__MIN")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.time.Instant MIN
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Instant get MIN => const $InstantType().fromRef(_get_MIN().object);

  static final _now =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>("Instant__now")
          .asFunction<jni.JniResult Function()>();

  /// from: static public java.time.Instant now()
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Instant now() => const $InstantType().fromRef(_now().object);

  static final _now1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Instant__now1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public java.time.Instant now(java.time.Clock clock)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Instant now1(jni.JObject clock) =>
      const $InstantType().fromRef(_now1(clock.reference).object);

  static final _ofEpochSecond =
      jniLookup<ffi.NativeFunction<jni.JniResult Function(ffi.Int64)>>(
              "Instant__ofEpochSecond")
          .asFunction<jni.JniResult Function(int)>();

  /// from: static public java.time.Instant ofEpochSecond(long j)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Instant ofEpochSecond(int j) =>
      const $InstantType().fromRef(_ofEpochSecond(j).object);

  static final _ofEpochSecond1 = jniLookup<
              ffi.NativeFunction<jni.JniResult Function(ffi.Int64, ffi.Int64)>>(
          "Instant__ofEpochSecond1")
      .asFunction<jni.JniResult Function(int, int)>();

  /// from: static public java.time.Instant ofEpochSecond(long j, long j1)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Instant ofEpochSecond1(int j, int j1) =>
      const $InstantType().fromRef(_ofEpochSecond1(j, j1).object);

  static final _ofEpochMilli =
      jniLookup<ffi.NativeFunction<jni.JniResult Function(ffi.Int64)>>(
              "Instant__ofEpochMilli")
          .asFunction<jni.JniResult Function(int)>();

  /// from: static public java.time.Instant ofEpochMilli(long j)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Instant ofEpochMilli(int j) =>
      const $InstantType().fromRef(_ofEpochMilli(j).object);

  static final _from = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Instant__from")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public java.time.Instant from(java.time.temporal.TemporalAccessor temporalAccessor)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Instant from(jni.JObject temporalAccessor) =>
      const $InstantType().fromRef(_from(temporalAccessor.reference).object);

  static final _parse = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Instant__parse")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public java.time.Instant parse(java.lang.CharSequence charSequence)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Instant parse(jni.JObject charSequence) =>
      const $InstantType().fromRef(_parse(charSequence.reference).object);

  static final _isSupported = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Instant__isSupported")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isSupported(java.time.temporal.TemporalField temporalField)
  bool isSupported(jni.JObject temporalField) =>
      _isSupported(reference, temporalField.reference).boolean;

  static final _isSupported1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Instant__isSupported1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isSupported(java.time.temporal.TemporalUnit temporalUnit)
  bool isSupported1(jni.JObject temporalUnit) =>
      _isSupported1(reference, temporalUnit.reference).boolean;

  static final _range = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Instant__range")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.time.temporal.ValueRange range(java.time.temporal.TemporalField temporalField)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject range(jni.JObject temporalField) => const jni.JObjectType()
      .fromRef(_range(reference, temporalField.reference).object);

  static final _get0 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Instant__get0")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public int get(java.time.temporal.TemporalField temporalField)
  int get0(jni.JObject temporalField) =>
      _get0(reference, temporalField.reference).integer;

  static final _getLong = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Instant__getLong")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public long getLong(java.time.temporal.TemporalField temporalField)
  int getLong(jni.JObject temporalField) =>
      _getLong(reference, temporalField.reference).long;

  static final _getEpochSecond = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Instant__getEpochSecond")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public long getEpochSecond()
  int getEpochSecond() => _getEpochSecond(reference).long;

  static final _getNano = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Instant__getNano")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getNano()
  int getNano() => _getNano(reference).integer;

  static final _with0 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Instant__with0")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.time.Instant with(java.time.temporal.TemporalAdjuster temporalAdjuster)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Instant with0(jni.JObject temporalAdjuster) => const $InstantType()
      .fromRef(_with0(reference, temporalAdjuster.reference).object);

  static final _with1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>, ffi.Int64)>>("Instant__with1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public java.time.Instant with(java.time.temporal.TemporalField temporalField, long j)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Instant with1(jni.JObject temporalField, int j) => const $InstantType()
      .fromRef(_with1(reference, temporalField.reference, j).object);

  static final _truncatedTo = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Instant__truncatedTo")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.time.Instant truncatedTo(java.time.temporal.TemporalUnit temporalUnit)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Instant truncatedTo(jni.JObject temporalUnit) => const $InstantType()
      .fromRef(_truncatedTo(reference, temporalUnit.reference).object);

  static final _plus = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Instant__plus")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.time.Instant plus(java.time.temporal.TemporalAmount temporalAmount)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Instant plus(jni.JObject temporalAmount) => const $InstantType()
      .fromRef(_plus(reference, temporalAmount.reference).object);

  static final _plus1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int64,
                  ffi.Pointer<ffi.Void>)>>("Instant__plus1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public java.time.Instant plus(long j, java.time.temporal.TemporalUnit temporalUnit)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Instant plus1(int j, jni.JObject temporalUnit) => const $InstantType()
      .fromRef(_plus1(reference, j, temporalUnit.reference).object);

  static final _plusSeconds = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int64)>>("Instant__plusSeconds")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public java.time.Instant plusSeconds(long j)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Instant plusSeconds(int j) =>
      const $InstantType().fromRef(_plusSeconds(reference, j).object);

  static final _plusMillis = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int64)>>("Instant__plusMillis")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public java.time.Instant plusMillis(long j)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Instant plusMillis(int j) =>
      const $InstantType().fromRef(_plusMillis(reference, j).object);

  static final _plusNanos = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int64)>>("Instant__plusNanos")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public java.time.Instant plusNanos(long j)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Instant plusNanos(int j) =>
      const $InstantType().fromRef(_plusNanos(reference, j).object);

  static final _minus = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Instant__minus")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.time.Instant minus(java.time.temporal.TemporalAmount temporalAmount)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Instant minus(jni.JObject temporalAmount) => const $InstantType()
      .fromRef(_minus(reference, temporalAmount.reference).object);

  static final _minus1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int64,
                  ffi.Pointer<ffi.Void>)>>("Instant__minus1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public java.time.Instant minus(long j, java.time.temporal.TemporalUnit temporalUnit)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Instant minus1(int j, jni.JObject temporalUnit) => const $InstantType()
      .fromRef(_minus1(reference, j, temporalUnit.reference).object);

  static final _minusSeconds = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int64)>>("Instant__minusSeconds")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public java.time.Instant minusSeconds(long j)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Instant minusSeconds(int j) =>
      const $InstantType().fromRef(_minusSeconds(reference, j).object);

  static final _minusMillis = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int64)>>("Instant__minusMillis")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public java.time.Instant minusMillis(long j)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Instant minusMillis(int j) =>
      const $InstantType().fromRef(_minusMillis(reference, j).object);

  static final _minusNanos = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int64)>>("Instant__minusNanos")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public java.time.Instant minusNanos(long j)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Instant minusNanos(int j) =>
      const $InstantType().fromRef(_minusNanos(reference, j).object);

  static final _query = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Instant__query")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public R query(java.time.temporal.TemporalQuery temporalQuery)
  /// The returned object must be deleted after use, by calling the `delete` method.
  R query<R extends jni.JObject>(
          jni.JObjType<R> $R, jni.JObject temporalQuery) =>
      $R.fromRef(_query(reference, temporalQuery.reference).object);

  static final _adjustInto = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Instant__adjustInto")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal temporal)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject adjustInto(jni.JObject temporal) => const jni.JObjectType()
      .fromRef(_adjustInto(reference, temporal.reference).object);

  static final _until = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Instant__until")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public long until(java.time.temporal.Temporal temporal, java.time.temporal.TemporalUnit temporalUnit)
  int until(jni.JObject temporal, jni.JObject temporalUnit) =>
      _until(reference, temporal.reference, temporalUnit.reference).long;

  static final _atOffset = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Instant__atOffset")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.time.OffsetDateTime atOffset(java.time.ZoneOffset zoneOffset)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject atOffset(jni.JObject zoneOffset) => const jni.JObjectType()
      .fromRef(_atOffset(reference, zoneOffset.reference).object);

  static final _atZone = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Instant__atZone")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.time.ZonedDateTime atZone(java.time.ZoneId zoneId)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject atZone(jni.JObject zoneId) => const jni.JObjectType()
      .fromRef(_atZone(reference, zoneId.reference).object);

  static final _toEpochMilli = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Instant__toEpochMilli")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public long toEpochMilli()
  int toEpochMilli() => _toEpochMilli(reference).long;

  static final _compareTo = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Instant__compareTo")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public int compareTo(java.time.Instant instant)
  int compareTo(Instant instant) =>
      _compareTo(reference, instant.reference).integer;

  static final _isAfter = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Instant__isAfter")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isAfter(java.time.Instant instant)
  bool isAfter(Instant instant) =>
      _isAfter(reference, instant.reference).boolean;

  static final _isBefore = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Instant__isBefore")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isBefore(java.time.Instant instant)
  bool isBefore(Instant instant) =>
      _isBefore(reference, instant.reference).boolean;

  static final _equals1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Instant__equals1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean equals(java.lang.Object object)
  bool equals1(jni.JObject object) =>
      _equals1(reference, object.reference).boolean;

  static final _hashCode1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Instant__hashCode1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int hashCode()
  int hashCode1() => _hashCode1(reference).integer;

  static final _toString1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Instant__toString1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString toString1() =>
      const jni.JStringType().fromRef(_toString1(reference).object);

  static final _minus2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int64,
                  ffi.Pointer<ffi.Void>)>>("Instant__minus2")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public java.time.temporal.Temporal minus(long j, java.time.temporal.TemporalUnit temporalUnit)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject minus2(int j, jni.JObject temporalUnit) => const jni.JObjectType()
      .fromRef(_minus2(reference, j, temporalUnit.reference).object);

  static final _minus3 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Instant__minus3")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount temporalAmount)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject minus3(jni.JObject temporalAmount) => const jni.JObjectType()
      .fromRef(_minus3(reference, temporalAmount.reference).object);

  static final _plus2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int64,
                  ffi.Pointer<ffi.Void>)>>("Instant__plus2")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public java.time.temporal.Temporal plus(long j, java.time.temporal.TemporalUnit temporalUnit)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject plus2(int j, jni.JObject temporalUnit) => const jni.JObjectType()
      .fromRef(_plus2(reference, j, temporalUnit.reference).object);

  static final _plus3 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Instant__plus3")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount temporalAmount)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject plus3(jni.JObject temporalAmount) => const jni.JObjectType()
      .fromRef(_plus3(reference, temporalAmount.reference).object);

  static final _with2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>, ffi.Int64)>>("Instant__with2")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public java.time.temporal.Temporal with(java.time.temporal.TemporalField temporalField, long j)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject with2(jni.JObject temporalField, int j) => const jni.JObjectType()
      .fromRef(_with2(reference, temporalField.reference, j).object);

  static final _with3 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Instant__with3")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.time.temporal.Temporal with(java.time.temporal.TemporalAdjuster temporalAdjuster)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject with3(jni.JObject temporalAdjuster) => const jni.JObjectType()
      .fromRef(_with3(reference, temporalAdjuster.reference).object);

  static final _compareTo1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Instant__compareTo1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public int compareTo(java.lang.Object object)
  int compareTo1(jni.JObject object) =>
      _compareTo1(reference, object.reference).integer;
}

class $InstantType extends jni.JObjType<Instant> {
  const $InstantType();

  @override
  String get signature => r"Ljava/time/Instant;";

  @override
  Instant fromRef(jni.JObjectPtr ref) => Instant.fromRef(ref);
}

extension $InstantArray on jni.JArray<Instant> {
  Instant operator [](int index) {
    return (elementType as $InstantType)
        .fromRef(elementAt(index, jni.JniCallType.objectType).object);
  }

  void operator []=(int index, Instant value) {
    (this as jni.JArray<jni.JObject>)[index] = value;
  }
}

/// from: java.lang.Long
class Long extends jni.JObject {
  late final jni.JObjType? _$type;
  @override
  jni.JObjType get $type => _$type ??= type;

  Long.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $LongType();

  /// from: static public final int BYTES
  static const BYTES = 8;

  /// from: static public final long MAX_VALUE
  static const MAX_VALUE = 9223372036854775807;

  /// from: static public final long MIN_VALUE
  static const MIN_VALUE = -9223372036854775808;

  /// from: static public final int SIZE
  static const SIZE = 64;

  static final _get_TYPE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>("get_Long__TYPE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.Class TYPE
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JObject get TYPE =>
      const jni.JObjectType().fromRef(_get_TYPE().object);

  static final _ctor =
      jniLookup<ffi.NativeFunction<jni.JniResult Function(ffi.Int64)>>(
              "Long__ctor")
          .asFunction<jni.JniResult Function(int)>();

  /// from: public void <init>(long j)
  Long(int j) : super.fromRef(_ctor(j).object);

  static final _ctor1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Long__ctor1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.lang.String string)
  Long.ctor1(jni.JString string)
      : super.fromRef(_ctor1(string.reference).object);

  static final _toString1 = jniLookup<
              ffi.NativeFunction<jni.JniResult Function(ffi.Int64, ffi.Int32)>>(
          "Long__toString1")
      .asFunction<jni.JniResult Function(int, int)>();

  /// from: static public java.lang.String toString(long j, int i)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JString toString1(int j, int i) =>
      const jni.JStringType().fromRef(_toString1(j, i).object);

  static final _toUnsignedString = jniLookup<
              ffi.NativeFunction<jni.JniResult Function(ffi.Int64, ffi.Int32)>>(
          "Long__toUnsignedString")
      .asFunction<jni.JniResult Function(int, int)>();

  /// from: static public java.lang.String toUnsignedString(long j, int i)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JString toUnsignedString(int j, int i) =>
      const jni.JStringType().fromRef(_toUnsignedString(j, i).object);

  static final _toHexString =
      jniLookup<ffi.NativeFunction<jni.JniResult Function(ffi.Int64)>>(
              "Long__toHexString")
          .asFunction<jni.JniResult Function(int)>();

  /// from: static public java.lang.String toHexString(long j)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JString toHexString(int j) =>
      const jni.JStringType().fromRef(_toHexString(j).object);

  static final _toOctalString =
      jniLookup<ffi.NativeFunction<jni.JniResult Function(ffi.Int64)>>(
              "Long__toOctalString")
          .asFunction<jni.JniResult Function(int)>();

  /// from: static public java.lang.String toOctalString(long j)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JString toOctalString(int j) =>
      const jni.JStringType().fromRef(_toOctalString(j).object);

  static final _toBinaryString =
      jniLookup<ffi.NativeFunction<jni.JniResult Function(ffi.Int64)>>(
              "Long__toBinaryString")
          .asFunction<jni.JniResult Function(int)>();

  /// from: static public java.lang.String toBinaryString(long j)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JString toBinaryString(int j) =>
      const jni.JStringType().fromRef(_toBinaryString(j).object);

  static final _toString2 =
      jniLookup<ffi.NativeFunction<jni.JniResult Function(ffi.Int64)>>(
              "Long__toString2")
          .asFunction<jni.JniResult Function(int)>();

  /// from: static public java.lang.String toString(long j)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JString toString2(int j) =>
      const jni.JStringType().fromRef(_toString2(j).object);

  static final _toUnsignedString1 =
      jniLookup<ffi.NativeFunction<jni.JniResult Function(ffi.Int64)>>(
              "Long__toUnsignedString1")
          .asFunction<jni.JniResult Function(int)>();

  /// from: static public java.lang.String toUnsignedString(long j)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JString toUnsignedString1(int j) =>
      const jni.JStringType().fromRef(_toUnsignedString1(j).object);

  static final _parseLong = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("Long__parseLong")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: static public long parseLong(java.lang.String string, int i)
  static int parseLong(jni.JString string, int i) =>
      _parseLong(string.reference, i).long;

  static final _parseLong1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Int32, ffi.Int32)>>("Long__parseLong1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, int, int, int)>();

  /// from: static public long parseLong(java.lang.CharSequence charSequence, int i, int i1, int i2)
  static int parseLong1(jni.JObject charSequence, int i, int i1, int i2) =>
      _parseLong1(charSequence.reference, i, i1, i2).long;

  static final _parseLong2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Long__parseLong2")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public long parseLong(java.lang.String string)
  static int parseLong2(jni.JString string) =>
      _parseLong2(string.reference).long;

  static final _parseUnsignedLong = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("Long__parseUnsignedLong")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: static public long parseUnsignedLong(java.lang.String string, int i)
  static int parseUnsignedLong(jni.JString string, int i) =>
      _parseUnsignedLong(string.reference, i).long;

  static final _parseUnsignedLong1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Int32, ffi.Int32)>>("Long__parseUnsignedLong1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, int, int, int)>();

  /// from: static public long parseUnsignedLong(java.lang.CharSequence charSequence, int i, int i1, int i2)
  static int parseUnsignedLong1(
          jni.JObject charSequence, int i, int i1, int i2) =>
      _parseUnsignedLong1(charSequence.reference, i, i1, i2).long;

  static final _parseUnsignedLong2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Long__parseUnsignedLong2")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public long parseUnsignedLong(java.lang.String string)
  static int parseUnsignedLong2(jni.JString string) =>
      _parseUnsignedLong2(string.reference).long;

  static final _valueOf = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("Long__valueOf")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: static public java.lang.Long valueOf(java.lang.String string, int i)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Long valueOf(jni.JString string, int i) =>
      const $LongType().fromRef(_valueOf(string.reference, i).object);

  static final _valueOf1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Long__valueOf1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public java.lang.Long valueOf(java.lang.String string)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Long valueOf1(jni.JString string) =>
      const $LongType().fromRef(_valueOf1(string.reference).object);

  static final _valueOf2 =
      jniLookup<ffi.NativeFunction<jni.JniResult Function(ffi.Int64)>>(
              "Long__valueOf2")
          .asFunction<jni.JniResult Function(int)>();

  /// from: static public java.lang.Long valueOf(long j)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Long valueOf2(int j) => const $LongType().fromRef(_valueOf2(j).object);

  static final _decode = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Long__decode")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public java.lang.Long decode(java.lang.String string)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Long decode(jni.JString string) =>
      const $LongType().fromRef(_decode(string.reference).object);

  static final _byteValue = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Long__byteValue")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public byte byteValue()
  int byteValue() => _byteValue(reference).byte;

  static final _shortValue = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Long__shortValue")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public short shortValue()
  int shortValue() => _shortValue(reference).short;

  static final _intValue = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Long__intValue")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int intValue()
  int intValue() => _intValue(reference).integer;

  static final _longValue = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Long__longValue")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public long longValue()
  int longValue() => _longValue(reference).long;

  static final _floatValue = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Long__floatValue")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public float floatValue()
  double floatValue() => _floatValue(reference).float;

  static final _doubleValue = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Long__doubleValue")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public double doubleValue()
  double doubleValue() => _doubleValue(reference).doubleFloat;

  static final _toString3 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Long__toString3")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString toString3() =>
      const jni.JStringType().fromRef(_toString3(reference).object);

  static final _hashCode1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Long__hashCode1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int hashCode()
  int hashCode1() => _hashCode1(reference).integer;

  static final _hashCode2 =
      jniLookup<ffi.NativeFunction<jni.JniResult Function(ffi.Int64)>>(
              "Long__hashCode2")
          .asFunction<jni.JniResult Function(int)>();

  /// from: static public int hashCode(long j)
  static int hashCode2(int j) => _hashCode2(j).integer;

  static final _equals1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Long__equals1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean equals(java.lang.Object object)
  bool equals1(jni.JObject object) =>
      _equals1(reference, object.reference).boolean;

  static final _getLong = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Long__getLong")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public java.lang.Long getLong(java.lang.String string)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Long getLong(jni.JString string) =>
      const $LongType().fromRef(_getLong(string.reference).object);

  static final _getLong1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int64)>>("Long__getLong1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: static public java.lang.Long getLong(java.lang.String string, long j)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Long getLong1(jni.JString string, int j) =>
      const $LongType().fromRef(_getLong1(string.reference, j).object);

  static final _getLong2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Long__getLong2")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public java.lang.Long getLong(java.lang.String string, java.lang.Long long)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Long getLong2(jni.JString string, Long long) => const $LongType()
      .fromRef(_getLong2(string.reference, long.reference).object);

  static final _compareTo = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Long__compareTo")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public int compareTo(java.lang.Long long)
  int compareTo(Long long) => _compareTo(reference, long.reference).integer;

  static final _compare = jniLookup<
              ffi.NativeFunction<jni.JniResult Function(ffi.Int64, ffi.Int64)>>(
          "Long__compare")
      .asFunction<jni.JniResult Function(int, int)>();

  /// from: static public int compare(long j, long j1)
  static int compare(int j, int j1) => _compare(j, j1).integer;

  static final _compareUnsigned = jniLookup<
              ffi.NativeFunction<jni.JniResult Function(ffi.Int64, ffi.Int64)>>(
          "Long__compareUnsigned")
      .asFunction<jni.JniResult Function(int, int)>();

  /// from: static public int compareUnsigned(long j, long j1)
  static int compareUnsigned(int j, int j1) => _compareUnsigned(j, j1).integer;

  static final _divideUnsigned = jniLookup<
              ffi.NativeFunction<jni.JniResult Function(ffi.Int64, ffi.Int64)>>(
          "Long__divideUnsigned")
      .asFunction<jni.JniResult Function(int, int)>();

  /// from: static public long divideUnsigned(long j, long j1)
  static int divideUnsigned(int j, int j1) => _divideUnsigned(j, j1).long;

  static final _remainderUnsigned = jniLookup<
              ffi.NativeFunction<jni.JniResult Function(ffi.Int64, ffi.Int64)>>(
          "Long__remainderUnsigned")
      .asFunction<jni.JniResult Function(int, int)>();

  /// from: static public long remainderUnsigned(long j, long j1)
  static int remainderUnsigned(int j, int j1) => _remainderUnsigned(j, j1).long;

  static final _highestOneBit =
      jniLookup<ffi.NativeFunction<jni.JniResult Function(ffi.Int64)>>(
              "Long__highestOneBit")
          .asFunction<jni.JniResult Function(int)>();

  /// from: static public long highestOneBit(long j)
  static int highestOneBit(int j) => _highestOneBit(j).long;

  static final _lowestOneBit =
      jniLookup<ffi.NativeFunction<jni.JniResult Function(ffi.Int64)>>(
              "Long__lowestOneBit")
          .asFunction<jni.JniResult Function(int)>();

  /// from: static public long lowestOneBit(long j)
  static int lowestOneBit(int j) => _lowestOneBit(j).long;

  static final _numberOfLeadingZeros =
      jniLookup<ffi.NativeFunction<jni.JniResult Function(ffi.Int64)>>(
              "Long__numberOfLeadingZeros")
          .asFunction<jni.JniResult Function(int)>();

  /// from: static public int numberOfLeadingZeros(long j)
  static int numberOfLeadingZeros(int j) => _numberOfLeadingZeros(j).integer;

  static final _numberOfTrailingZeros =
      jniLookup<ffi.NativeFunction<jni.JniResult Function(ffi.Int64)>>(
              "Long__numberOfTrailingZeros")
          .asFunction<jni.JniResult Function(int)>();

  /// from: static public int numberOfTrailingZeros(long j)
  static int numberOfTrailingZeros(int j) => _numberOfTrailingZeros(j).integer;

  static final _bitCount =
      jniLookup<ffi.NativeFunction<jni.JniResult Function(ffi.Int64)>>(
              "Long__bitCount")
          .asFunction<jni.JniResult Function(int)>();

  /// from: static public int bitCount(long j)
  static int bitCount(int j) => _bitCount(j).integer;

  static final _rotateLeft = jniLookup<
              ffi.NativeFunction<jni.JniResult Function(ffi.Int64, ffi.Int32)>>(
          "Long__rotateLeft")
      .asFunction<jni.JniResult Function(int, int)>();

  /// from: static public long rotateLeft(long j, int i)
  static int rotateLeft(int j, int i) => _rotateLeft(j, i).long;

  static final _rotateRight = jniLookup<
              ffi.NativeFunction<jni.JniResult Function(ffi.Int64, ffi.Int32)>>(
          "Long__rotateRight")
      .asFunction<jni.JniResult Function(int, int)>();

  /// from: static public long rotateRight(long j, int i)
  static int rotateRight(int j, int i) => _rotateRight(j, i).long;

  static final _reverse =
      jniLookup<ffi.NativeFunction<jni.JniResult Function(ffi.Int64)>>(
              "Long__reverse")
          .asFunction<jni.JniResult Function(int)>();

  /// from: static public long reverse(long j)
  static int reverse(int j) => _reverse(j).long;

  static final _signum =
      jniLookup<ffi.NativeFunction<jni.JniResult Function(ffi.Int64)>>(
              "Long__signum")
          .asFunction<jni.JniResult Function(int)>();

  /// from: static public int signum(long j)
  static int signum(int j) => _signum(j).integer;

  static final _reverseBytes =
      jniLookup<ffi.NativeFunction<jni.JniResult Function(ffi.Int64)>>(
              "Long__reverseBytes")
          .asFunction<jni.JniResult Function(int)>();

  /// from: static public long reverseBytes(long j)
  static int reverseBytes(int j) => _reverseBytes(j).long;

  static final _sum = jniLookup<
              ffi.NativeFunction<jni.JniResult Function(ffi.Int64, ffi.Int64)>>(
          "Long__sum")
      .asFunction<jni.JniResult Function(int, int)>();

  /// from: static public long sum(long j, long j1)
  static int sum(int j, int j1) => _sum(j, j1).long;

  static final _max = jniLookup<
              ffi.NativeFunction<jni.JniResult Function(ffi.Int64, ffi.Int64)>>(
          "Long__max")
      .asFunction<jni.JniResult Function(int, int)>();

  /// from: static public long max(long j, long j1)
  static int max(int j, int j1) => _max(j, j1).long;

  static final _min = jniLookup<
              ffi.NativeFunction<jni.JniResult Function(ffi.Int64, ffi.Int64)>>(
          "Long__min")
      .asFunction<jni.JniResult Function(int, int)>();

  /// from: static public long min(long j, long j1)
  static int min(int j, int j1) => _min(j, j1).long;

  static final _compareTo1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Long__compareTo1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public int compareTo(java.lang.Object object)
  int compareTo1(jni.JObject object) =>
      _compareTo1(reference, object.reference).integer;
}

class $LongType extends jni.JObjType<Long> {
  const $LongType();

  @override
  String get signature => r"Ljava/lang/Long;";

  @override
  Long fromRef(jni.JObjectPtr ref) => Long.fromRef(ref);
}

extension $LongArray on jni.JArray<Long> {
  Long operator [](int index) {
    return (elementType as $LongType)
        .fromRef(elementAt(index, jni.JniCallType.objectType).object);
  }

  void operator []=(int index, Long value) {
    (this as jni.JArray<jni.JObject>)[index] = value;
  }
}

/// from: java.util.Set
class Set<E extends jni.JObject> extends jni.JObject {
  late final jni.JObjType? _$type;
  @override
  jni.JObjType get $type => _$type ??= type(
        $E,
      );

  final jni.JObjType<E> $E;

  Set.fromRef(
    this.$E,
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static $SetType<E> type<E extends jni.JObject>(
    jni.JObjType<E> $E,
  ) {
    return $SetType(
      $E,
    );
  }

  static final _size = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Set__size")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract int size()
  int size() => _size(reference).integer;

  static final _isEmpty = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Set__isEmpty")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean isEmpty()
  bool isEmpty() => _isEmpty(reference).boolean;

  static final _contains = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Set__contains")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean contains(java.lang.Object object)
  bool contains(jni.JObject object) =>
      _contains(reference, object.reference).boolean;

  static final _iterator = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Set__iterator")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.util.Iterator iterator()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject iterator() =>
      const jni.JObjectType().fromRef(_iterator(reference).object);

  static final _toArray = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Set__toArray")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object[] toArray()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JArray<jni.JObject> toArray() => const jni.JArrayType(jni.JObjectType())
      .fromRef(_toArray(reference).object);

  static final _toArray1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Set__toArray1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object[] toArray(java.lang.Object[] objects)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JArray<T> toArray1<T extends jni.JObject>(
          jni.JObjType<T> $T, jni.JArray<T> objects) =>
      jni.JArrayType($T)
          .fromRef(_toArray1(reference, objects.reference).object);

  static final _add = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>("Set__add")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean add(E object)
  bool add(E object) => _add(reference, object.reference).boolean;

  static final _remove = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>("Set__remove")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean remove(java.lang.Object object)
  bool remove(jni.JObject object) =>
      _remove(reference, object.reference).boolean;

  static final _containsAll = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Set__containsAll")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean containsAll(java.util.Collection collection)
  bool containsAll(jni.JObject collection) =>
      _containsAll(reference, collection.reference).boolean;

  static final _addAll = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>("Set__addAll")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean addAll(java.util.Collection collection)
  bool addAll(jni.JObject collection) =>
      _addAll(reference, collection.reference).boolean;

  static final _retainAll = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Set__retainAll")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean retainAll(java.util.Collection collection)
  bool retainAll(jni.JObject collection) =>
      _retainAll(reference, collection.reference).boolean;

  static final _removeAll = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Set__removeAll")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean removeAll(java.util.Collection collection)
  bool removeAll(jni.JObject collection) =>
      _removeAll(reference, collection.reference).boolean;

  static final _clear = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Set__clear")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void clear()
  void clear() => _clear(reference).check();

  static final _equals1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Set__equals1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean equals(java.lang.Object object)
  bool equals1(jni.JObject object) =>
      _equals1(reference, object.reference).boolean;

  static final _hashCode1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Set__hashCode1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract int hashCode()
  int hashCode1() => _hashCode1(reference).integer;

  static final _spliterator = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Set__spliterator")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Spliterator spliterator()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject spliterator() =>
      const jni.JObjectType().fromRef(_spliterator(reference).object);

  static final _of =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>("Set__of")
          .asFunction<jni.JniResult Function()>();

  /// from: static public java.util.Set of()
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Set<E> of<E extends jni.JObject>(jni.JObjType<E> $E) =>
      $SetType($E).fromRef(_of().object);

  static final _of1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Set__of1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.Set of(E object)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Set<E> of1<E extends jni.JObject>(jni.JObjType<E> $E, E object) =>
      $SetType($E).fromRef(_of1(object.reference).object);

  static final _of2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>("Set__of2")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.Set of(E object, E object1)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Set<E> of2<E extends jni.JObject>(
          jni.JObjType<E> $E, E object, E object1) =>
      $SetType($E).fromRef(_of2(object.reference, object1.reference).object);

  static final _of3 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>("Set__of3")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.Set of(E object, E object1, E object2)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Set<E> of3<E extends jni.JObject>(
          jni.JObjType<E> $E, E object, E object1, E object2) =>
      $SetType($E).fromRef(
          _of3(object.reference, object1.reference, object2.reference).object);

  static final _of4 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Set__of4")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.Set of(E object, E object1, E object2, E object3)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Set<E> of4<E extends jni.JObject>(
          jni.JObjType<E> $E, E object, E object1, E object2, E object3) =>
      $SetType($E).fromRef(_of4(object.reference, object1.reference,
              object2.reference, object3.reference)
          .object);

  static final _of5 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Set__of5")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.Set of(E object, E object1, E object2, E object3, E object4)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Set<E> of5<E extends jni.JObject>(jni.JObjType<E> $E, E object,
          E object1, E object2, E object3, E object4) =>
      $SetType($E).fromRef(_of5(object.reference, object1.reference,
              object2.reference, object3.reference, object4.reference)
          .object);

  static final _of6 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Set__of6")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.Set of(E object, E object1, E object2, E object3, E object4, E object5)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Set<E> of6<E extends jni.JObject>(jni.JObjType<E> $E, E object,
          E object1, E object2, E object3, E object4, E object5) =>
      $SetType($E).fromRef(_of6(
              object.reference,
              object1.reference,
              object2.reference,
              object3.reference,
              object4.reference,
              object5.reference)
          .object);

  static final _of7 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Set__of7")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.Set of(E object, E object1, E object2, E object3, E object4, E object5, E object6)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Set<E> of7<E extends jni.JObject>(jni.JObjType<E> $E, E object,
          E object1, E object2, E object3, E object4, E object5, E object6) =>
      $SetType($E).fromRef(_of7(
              object.reference,
              object1.reference,
              object2.reference,
              object3.reference,
              object4.reference,
              object5.reference,
              object6.reference)
          .object);

  static final _of8 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Set__of8")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.Set of(E object, E object1, E object2, E object3, E object4, E object5, E object6, E object7)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Set<E> of8<E extends jni.JObject>(
          jni.JObjType<E> $E,
          E object,
          E object1,
          E object2,
          E object3,
          E object4,
          E object5,
          E object6,
          E object7) =>
      $SetType($E).fromRef(_of8(
              object.reference,
              object1.reference,
              object2.reference,
              object3.reference,
              object4.reference,
              object5.reference,
              object6.reference,
              object7.reference)
          .object);

  static final _of9 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Set__of9")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.Set of(E object, E object1, E object2, E object3, E object4, E object5, E object6, E object7, E object8)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Set<E> of9<E extends jni.JObject>(
          jni.JObjType<E> $E,
          E object,
          E object1,
          E object2,
          E object3,
          E object4,
          E object5,
          E object6,
          E object7,
          E object8) =>
      $SetType($E).fromRef(_of9(
              object.reference,
              object1.reference,
              object2.reference,
              object3.reference,
              object4.reference,
              object5.reference,
              object6.reference,
              object7.reference,
              object8.reference)
          .object);

  static final _of10 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Set__of10")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.Set of(E object, E object1, E object2, E object3, E object4, E object5, E object6, E object7, E object8, E object9)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Set<E> of10<E extends jni.JObject>(
          jni.JObjType<E> $E,
          E object,
          E object1,
          E object2,
          E object3,
          E object4,
          E object5,
          E object6,
          E object7,
          E object8,
          E object9) =>
      $SetType($E).fromRef(_of10(
              object.reference,
              object1.reference,
              object2.reference,
              object3.reference,
              object4.reference,
              object5.reference,
              object6.reference,
              object7.reference,
              object8.reference,
              object9.reference)
          .object);

  static final _of11 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Set__of11")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.Set of(java.lang.Object[] objects)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Set<E> of11<E extends jni.JObject>(
          jni.JObjType<E> $E, jni.JArray<E> objects) =>
      $SetType($E).fromRef(_of11(objects.reference).object);

  static final _copyOf = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Set__copyOf")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.Set copyOf(java.util.Collection collection)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Set<E> copyOf<E extends jni.JObject>(
          jni.JObjType<E> $E, jni.JObject collection) =>
      $SetType($E).fromRef(_copyOf(collection.reference).object);
}

class $SetType<E extends jni.JObject> extends jni.JObjType<Set<E>> {
  final jni.JObjType<E> $E;

  const $SetType(
    this.$E,
  );

  @override
  String get signature => r"Ljava/util/Set;";

  @override
  Set<E> fromRef(jni.JObjectPtr ref) => Set.fromRef($E, ref);
}

extension $SetArray<E extends jni.JObject> on jni.JArray<Set<E>> {
  Set<E> operator [](int index) {
    return (elementType as $SetType<E>)
        .fromRef(elementAt(index, jni.JniCallType.objectType).object);
  }

  void operator []=(int index, Set<E> value) {
    (this as jni.JArray<jni.JObject>)[index] = value;
  }
}
